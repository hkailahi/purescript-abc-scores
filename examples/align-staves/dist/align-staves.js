// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  };
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["SemigroupRecord"] = SemigroupRecord;
  exports["appendRecord"] = appendRecord;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($43) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 128, column 3 - line 131, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 119, column 3 - line 122, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];                 
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 269, column 46: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldl(dictFoldable)(function (ma) {
                      return function (b) {
                          return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["all"] = all;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 46, column 1 - line 46, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 91, column 3 - line 91, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 7 - line 119, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 27, column 1 - line 27, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 42, column 3 - line 42, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 158, column 33 - line 160, column 62: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($188) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($188));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["applyList"] = applyList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty line 91, column 3 - line 93, column 81: " + [ v1.constructor.name ]);
          };
      };
  };
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($163) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List.uncons(xs));
          })(toList($163));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function ($165) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($165));
  };
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var head = function (v) {
      return v.value0;
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
  exports["pow"] = $foreign.pow;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var semiringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value0))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, new Ratio(Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())), new Ratio(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())));
      };
  };
  var ringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Ring.Ring(function () {
              return semiringRatio(dictOrd)(dictEuclideanRing);
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          });
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var denominator = function (v) {
      return v.value1;
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
})(PS["Data.Ratio"] = PS["Data.Ratio"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Prelude = PS["Prelude"];                 
  var toNumber = function (x) {
      return Data_Int.toNumber(Data_Ratio.numerator(x)) / Data_Int.toNumber(Data_Ratio.denominator(x));
  };
  var fromInt = function (i) {
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(i)(1);
  };
  exports["toNumber"] = toNumber;
  exports["fromInt"] = fromInt;
})(PS["Data.Rational"] = PS["Data.Rational"] || {});
(function(exports) {
    "use strict";

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Thin = (function () {
      function Thin() {

      };
      Thin.value = new Thin();
      return Thin;
  })();
  var ThinThin = (function () {
      function ThinThin() {

      };
      ThinThin.value = new ThinThin();
      return ThinThin;
  })();
  var ThinThick = (function () {
      function ThinThick() {

      };
      ThinThick.value = new ThinThick();
      return ThinThick;
  })();
  var ThickThin = (function () {
      function ThickThin() {

      };
      ThickThin.value = new ThickThin();
      return ThickThin;
  })();
  var Invisible = (function () {
      function Invisible() {

      };
      Invisible.value = new Invisible();
      return Invisible;
  })();
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var BeginAndEnd = (function () {
      function BeginAndEnd() {

      };
      BeginAndEnd.value = new BeginAndEnd();
      return BeginAndEnd;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Ionian = (function () {
      function Ionian() {

      };
      Ionian.value = new Ionian();
      return Ionian;
  })();
  var Dorian = (function () {
      function Dorian() {

      };
      Dorian.value = new Dorian();
      return Dorian;
  })();
  var Phrygian = (function () {
      function Phrygian() {

      };
      Phrygian.value = new Phrygian();
      return Phrygian;
  })();
  var Lydian = (function () {
      function Lydian() {

      };
      Lydian.value = new Lydian();
      return Lydian;
  })();
  var Mixolydian = (function () {
      function Mixolydian() {

      };
      Mixolydian.value = new Mixolydian();
      return Mixolydian;
  })();
  var Aeolian = (function () {
      function Aeolian() {

      };
      Aeolian.value = new Aeolian();
      return Aeolian;
  })();
  var Locrian = (function () {
      function Locrian() {

      };
      Locrian.value = new Locrian();
      return Locrian;
  })();
  var LeftArrow = (function () {
      function LeftArrow(value0) {
          this.value0 = value0;
      };
      LeftArrow.create = function (value0) {
          return new LeftArrow(value0);
      };
      return LeftArrow;
  })();
  var RightArrow = (function () {
      function RightArrow(value0) {
          this.value0 = value0;
      };
      RightArrow.create = function (value0) {
          return new RightArrow(value0);
      };
      return RightArrow;
  })();
  var AboveNextSymbol = (function () {
      function AboveNextSymbol() {

      };
      AboveNextSymbol.value = new AboveNextSymbol();
      return AboveNextSymbol;
  })();
  var BelowNextSymbol = (function () {
      function BelowNextSymbol() {

      };
      BelowNextSymbol.value = new BelowNextSymbol();
      return BelowNextSymbol;
  })();
  var LeftOfNextSymbol = (function () {
      function LeftOfNextSymbol() {

      };
      LeftOfNextSymbol.value = new LeftOfNextSymbol();
      return LeftOfNextSymbol;
  })();
  var RightOfNextSymbol = (function () {
      function RightOfNextSymbol() {

      };
      RightOfNextSymbol.value = new RightOfNextSymbol();
      return RightOfNextSymbol;
  })();
  var Discretional = (function () {
      function Discretional() {

      };
      Discretional.value = new Discretional();
      return Discretional;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var DoubleSharp = (function () {
      function DoubleSharp() {

      };
      DoubleSharp.value = new DoubleSharp();
      return DoubleSharp;
  })();
  var DoubleFlat = (function () {
      function DoubleFlat() {

      };
      DoubleFlat.value = new DoubleFlat();
      return DoubleFlat;
  })();
  var Natural = (function () {
      function Natural() {

      };
      Natural.value = new Natural();
      return Natural;
  })();
  var Implicit = (function () {
      function Implicit() {

      };
      Implicit.value = new Implicit();
      return Implicit;
  })();
  var Pitch = (function () {
      function Pitch(value0) {
          this.value0 = value0;
      };
      Pitch.create = function (value0) {
          return new Pitch(value0);
      };
      return Pitch;
  })();
  var Area = (function () {
      function Area(value0) {
          this.value0 = value0;
      };
      Area.create = function (value0) {
          return new Area(value0);
      };
      return Area;
  })();
  var Book = (function () {
      function Book(value0) {
          this.value0 = value0;
      };
      Book.create = function (value0) {
          return new Book(value0);
      };
      return Book;
  })();
  var Composer = (function () {
      function Composer(value0) {
          this.value0 = value0;
      };
      Composer.create = function (value0) {
          return new Composer(value0);
      };
      return Composer;
  })();
  var Discography = (function () {
      function Discography(value0) {
          this.value0 = value0;
      };
      Discography.create = function (value0) {
          return new Discography(value0);
      };
      return Discography;
  })();
  var FileUrl = (function () {
      function FileUrl(value0) {
          this.value0 = value0;
      };
      FileUrl.create = function (value0) {
          return new FileUrl(value0);
      };
      return FileUrl;
  })();
  var Group = (function () {
      function Group(value0) {
          this.value0 = value0;
      };
      Group.create = function (value0) {
          return new Group(value0);
      };
      return Group;
  })();
  var History = (function () {
      function History(value0) {
          this.value0 = value0;
      };
      History.create = function (value0) {
          return new History(value0);
      };
      return History;
  })();
  var Instruction = (function () {
      function Instruction(value0) {
          this.value0 = value0;
      };
      Instruction.create = function (value0) {
          return new Instruction(value0);
      };
      return Instruction;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var UnitNoteLength = (function () {
      function UnitNoteLength(value0) {
          this.value0 = value0;
      };
      UnitNoteLength.create = function (value0) {
          return new UnitNoteLength(value0);
      };
      return UnitNoteLength;
  })();
  var Meter = (function () {
      function Meter(value0) {
          this.value0 = value0;
      };
      Meter.create = function (value0) {
          return new Meter(value0);
      };
      return Meter;
  })();
  var Macro = (function () {
      function Macro(value0) {
          this.value0 = value0;
      };
      Macro.create = function (value0) {
          return new Macro(value0);
      };
      return Macro;
  })();
  var Notes = (function () {
      function Notes(value0) {
          this.value0 = value0;
      };
      Notes.create = function (value0) {
          return new Notes(value0);
      };
      return Notes;
  })();
  var Origin = (function () {
      function Origin(value0) {
          this.value0 = value0;
      };
      Origin.create = function (value0) {
          return new Origin(value0);
      };
      return Origin;
  })();
  var Parts = (function () {
      function Parts(value0) {
          this.value0 = value0;
      };
      Parts.create = function (value0) {
          return new Parts(value0);
      };
      return Parts;
  })();
  var Tempo = (function () {
      function Tempo(value0) {
          this.value0 = value0;
      };
      Tempo.create = function (value0) {
          return new Tempo(value0);
      };
      return Tempo;
  })();
  var Rhythm = (function () {
      function Rhythm(value0) {
          this.value0 = value0;
      };
      Rhythm.create = function (value0) {
          return new Rhythm(value0);
      };
      return Rhythm;
  })();
  var Remark = (function () {
      function Remark(value0) {
          this.value0 = value0;
      };
      Remark.create = function (value0) {
          return new Remark(value0);
      };
      return Remark;
  })();
  var Source = (function () {
      function Source(value0) {
          this.value0 = value0;
      };
      Source.create = function (value0) {
          return new Source(value0);
      };
      return Source;
  })();
  var SymbolLine = (function () {
      function SymbolLine(value0) {
          this.value0 = value0;
      };
      SymbolLine.create = function (value0) {
          return new SymbolLine(value0);
      };
      return SymbolLine;
  })();
  var Title = (function () {
      function Title(value0) {
          this.value0 = value0;
      };
      Title.create = function (value0) {
          return new Title(value0);
      };
      return Title;
  })();
  var UserDefined = (function () {
      function UserDefined(value0) {
          this.value0 = value0;
      };
      UserDefined.create = function (value0) {
          return new UserDefined(value0);
      };
      return UserDefined;
  })();
  var Voice = (function () {
      function Voice(value0) {
          this.value0 = value0;
      };
      Voice.create = function (value0) {
          return new Voice(value0);
      };
      return Voice;
  })();
  var WordsAfter = (function () {
      function WordsAfter(value0) {
          this.value0 = value0;
      };
      WordsAfter.create = function (value0) {
          return new WordsAfter(value0);
      };
      return WordsAfter;
  })();
  var WordsAligned = (function () {
      function WordsAligned(value0) {
          this.value0 = value0;
      };
      WordsAligned.create = function (value0) {
          return new WordsAligned(value0);
      };
      return WordsAligned;
  })();
  var ReferenceNumber = (function () {
      function ReferenceNumber(value0) {
          this.value0 = value0;
      };
      ReferenceNumber.create = function (value0) {
          return new ReferenceNumber(value0);
      };
      return ReferenceNumber;
  })();
  var Transcription = (function () {
      function Transcription(value0) {
          this.value0 = value0;
      };
      Transcription.create = function (value0) {
          return new Transcription(value0);
      };
      return Transcription;
  })();
  var FieldContinuation = (function () {
      function FieldContinuation(value0) {
          this.value0 = value0;
      };
      FieldContinuation.create = function (value0) {
          return new FieldContinuation(value0);
      };
      return FieldContinuation;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var UnsupportedHeader = (function () {
      function UnsupportedHeader() {

      };
      UnsupportedHeader.value = new UnsupportedHeader();
      return UnsupportedHeader;
  })();
  var Note = (function () {
      function Note(value0) {
          this.value0 = value0;
      };
      Note.create = function (value0) {
          return new Note(value0);
      };
      return Note;
  })();
  var BrokenRhythmPair = (function () {
      function BrokenRhythmPair(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BrokenRhythmPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BrokenRhythmPair(value0, value1, value2);
              };
          };
      };
      return BrokenRhythmPair;
  })();
  var Rest = (function () {
      function Rest(value0) {
          this.value0 = value0;
      };
      Rest.create = function (value0) {
          return new Rest(value0);
      };
      return Rest;
  })();
  var Tuplet = (function () {
      function Tuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuplet.create = function (value0) {
          return function (value1) {
              return new Tuplet(value0, value1);
          };
      };
      return Tuplet;
  })();
  var Decoration = (function () {
      function Decoration(value0) {
          this.value0 = value0;
      };
      Decoration.create = function (value0) {
          return new Decoration(value0);
      };
      return Decoration;
  })();
  var Slur = (function () {
      function Slur(value0) {
          this.value0 = value0;
      };
      Slur.create = function (value0) {
          return new Slur(value0);
      };
      return Slur;
  })();
  var GraceNote = (function () {
      function GraceNote(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GraceNote.create = function (value0) {
          return function (value1) {
              return new GraceNote(value0, value1);
          };
      };
      return GraceNote;
  })();
  var Annotation = (function () {
      function Annotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotation.create = function (value0) {
          return function (value1) {
              return new Annotation(value0, value1);
          };
      };
      return Annotation;
  })();
  var ChordSymbol = (function () {
      function ChordSymbol(value0) {
          this.value0 = value0;
      };
      ChordSymbol.create = function (value0) {
          return new ChordSymbol(value0);
      };
      return ChordSymbol;
  })();
  var Chord = (function () {
      function Chord(value0) {
          this.value0 = value0;
      };
      Chord.create = function (value0) {
          return new Chord(value0);
      };
      return Chord;
  })();
  var Inline = (function () {
      function Inline(value0) {
          this.value0 = value0;
      };
      Inline.create = function (value0) {
          return new Inline(value0);
      };
      return Inline;
  })();
  var Spacer = (function () {
      function Spacer(value0) {
          this.value0 = value0;
      };
      Spacer.create = function (value0) {
          return new Spacer(value0);
      };
      return Spacer;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var Continuation = (function () {
      function Continuation() {

      };
      Continuation.value = new Continuation();
      return Continuation;
  })();
  var Score = (function () {
      function Score(value0) {
          this.value0 = value0;
      };
      Score.create = function (value0) {
          return new Score(value0);
      };
      return Score;
  })();
  var BodyInfo = (function () {
      function BodyInfo(value0) {
          this.value0 = value0;
      };
      BodyInfo.create = function (value0) {
          return new BodyInfo(value0);
      };
      return BodyInfo;
  })();
  var showPitchClass = new Data_Show.Show(function (v) {
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof B) {
          return "B";
      };
      if (v instanceof C) {
          return "C";
      };
      if (v instanceof D) {
          return "D";
      };
      if (v instanceof E) {
          return "E";
      };
      if (v instanceof F) {
          return "F";
      };
      if (v instanceof G) {
          return "G";
      };
      throw new Error("Failed pattern match at Data.Abc line 235, column 1 - line 235, column 43: " + [ v.constructor.name ]);
  });
  var middlecOctave = 5;
  var eqThickness = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Thin && y instanceof Thin) {
              return true;
          };
          if (x instanceof ThinThin && y instanceof ThinThin) {
              return true;
          };
          if (x instanceof ThinThick && y instanceof ThinThick) {
              return true;
          };
          if (x instanceof ThickThin && y instanceof ThickThin) {
              return true;
          };
          if (x instanceof Invisible && y instanceof Invisible) {
              return true;
          };
          return false;
      };
  });
  var eqRepeat = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Begin && y instanceof Begin) {
              return true;
          };
          if (x instanceof End && y instanceof End) {
              return true;
          };
          if (x instanceof BeginAndEnd && y instanceof BeginAndEnd) {
              return true;
          };
          return false;
      };
  });
  var eqPitchCLass = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return true;
          };
          if (x instanceof B && y instanceof B) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return true;
          };
          if (x instanceof D && y instanceof D) {
              return true;
          };
          if (x instanceof E && y instanceof E) {
              return true;
          };
          if (x instanceof F && y instanceof F) {
              return true;
          };
          if (x instanceof G && y instanceof G) {
              return true;
          };
          return false;
      };
  });
  var ordPitchCLass = new Data_Ord.Ord(function () {
      return eqPitchCLass;
  }, function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof A) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof A) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof B && y instanceof B) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof B) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof B) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof C && y instanceof C) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof C) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof C) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof D && y instanceof D) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof D) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof D) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof E && y instanceof E) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof E) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof E) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof F && y instanceof F) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof F) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof F) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof G && y instanceof G) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Abc line 245, column 8 - line 245, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Major && y instanceof Major) {
              return true;
          };
          if (x instanceof Minor && y instanceof Minor) {
              return true;
          };
          if (x instanceof Ionian && y instanceof Ionian) {
              return true;
          };
          if (x instanceof Dorian && y instanceof Dorian) {
              return true;
          };
          if (x instanceof Phrygian && y instanceof Phrygian) {
              return true;
          };
          if (x instanceof Lydian && y instanceof Lydian) {
              return true;
          };
          if (x instanceof Mixolydian && y instanceof Mixolydian) {
              return true;
          };
          if (x instanceof Aeolian && y instanceof Aeolian) {
              return true;
          };
          if (x instanceof Locrian && y instanceof Locrian) {
              return true;
          };
          return false;
      };
  });
  var eqAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return true;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return true;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return true;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return true;
          };
          if (x instanceof Implicit && y instanceof Implicit) {
              return true;
          };
          return false;
      };
  });
  var enumPitchClass = new Data_Enum.Enum(function () {
      return ordPitchCLass;
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(C.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(A.value);
      };
      throw new Error("Failed pattern match at Data.Abc line 247, column 1 - line 247, column 43: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(A.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(C.value);
      };
      throw new Error("Failed pattern match at Data.Abc line 247, column 1 - line 247, column 43: " + [ v.constructor.name ]);
  });
  exports["Score"] = Score;
  exports["BodyInfo"] = BodyInfo;
  exports["Area"] = Area;
  exports["Book"] = Book;
  exports["Composer"] = Composer;
  exports["Discography"] = Discography;
  exports["FileUrl"] = FileUrl;
  exports["Group"] = Group;
  exports["History"] = History;
  exports["Instruction"] = Instruction;
  exports["Key"] = Key;
  exports["UnitNoteLength"] = UnitNoteLength;
  exports["Meter"] = Meter;
  exports["Macro"] = Macro;
  exports["Notes"] = Notes;
  exports["Origin"] = Origin;
  exports["Parts"] = Parts;
  exports["Tempo"] = Tempo;
  exports["Rhythm"] = Rhythm;
  exports["Remark"] = Remark;
  exports["Source"] = Source;
  exports["SymbolLine"] = SymbolLine;
  exports["Title"] = Title;
  exports["UserDefined"] = UserDefined;
  exports["Voice"] = Voice;
  exports["WordsAfter"] = WordsAfter;
  exports["WordsAligned"] = WordsAligned;
  exports["ReferenceNumber"] = ReferenceNumber;
  exports["Transcription"] = Transcription;
  exports["FieldContinuation"] = FieldContinuation;
  exports["Comment"] = Comment;
  exports["UnsupportedHeader"] = UnsupportedHeader;
  exports["Note"] = Note;
  exports["BrokenRhythmPair"] = BrokenRhythmPair;
  exports["Rest"] = Rest;
  exports["Tuplet"] = Tuplet;
  exports["Decoration"] = Decoration;
  exports["Slur"] = Slur;
  exports["GraceNote"] = GraceNote;
  exports["Annotation"] = Annotation;
  exports["ChordSymbol"] = ChordSymbol;
  exports["Chord"] = Chord;
  exports["Inline"] = Inline;
  exports["Spacer"] = Spacer;
  exports["Ignore"] = Ignore;
  exports["Continuation"] = Continuation;
  exports["Thin"] = Thin;
  exports["ThinThin"] = ThinThin;
  exports["ThinThick"] = ThinThick;
  exports["ThickThin"] = ThickThin;
  exports["Invisible"] = Invisible;
  exports["Begin"] = Begin;
  exports["End"] = End;
  exports["BeginAndEnd"] = BeginAndEnd;
  exports["Pitch"] = Pitch;
  exports["AboveNextSymbol"] = AboveNextSymbol;
  exports["BelowNextSymbol"] = BelowNextSymbol;
  exports["LeftOfNextSymbol"] = LeftOfNextSymbol;
  exports["RightOfNextSymbol"] = RightOfNextSymbol;
  exports["Discretional"] = Discretional;
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Ionian"] = Ionian;
  exports["Dorian"] = Dorian;
  exports["Phrygian"] = Phrygian;
  exports["Lydian"] = Lydian;
  exports["Mixolydian"] = Mixolydian;
  exports["Aeolian"] = Aeolian;
  exports["Locrian"] = Locrian;
  exports["Sharp"] = Sharp;
  exports["Flat"] = Flat;
  exports["DoubleSharp"] = DoubleSharp;
  exports["DoubleFlat"] = DoubleFlat;
  exports["Natural"] = Natural;
  exports["Implicit"] = Implicit;
  exports["A"] = A;
  exports["B"] = B;
  exports["C"] = C;
  exports["D"] = D;
  exports["E"] = E;
  exports["F"] = F;
  exports["G"] = G;
  exports["LeftArrow"] = LeftArrow;
  exports["RightArrow"] = RightArrow;
  exports["middlecOctave"] = middlecOctave;
  exports["eqThickness"] = eqThickness;
  exports["eqRepeat"] = eqRepeat;
  exports["eqMode"] = eqMode;
  exports["eqAccidental"] = eqAccidental;
  exports["showPitchClass"] = showPitchClass;
  exports["eqPitchCLass"] = eqPitchCLass;
  exports["ordPitchCLass"] = ordPitchCLass;
  exports["enumPitchClass"] = enumPitchClass;
})(PS["Data.Abc"] = PS["Data.Abc"] || {});
(function(exports) {
    "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 143, column 3 - line 145, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };                                                                                  
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 323, column 1 - line 323, column 45: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $75 = p(v.value0);
                      if ($75) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array line 834, column 5 - line 836, column 25: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array line 821, column 3 - line 827, column 30: " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["takeWhile"] = takeWhile;
  exports["span"] = span;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodePoints"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && isTrail(cu1);
      if ($25) {
          return unsurrogate(cu0)(cu1);
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign._unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign._toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($51) {
      return Data_Array.length(toCodePointArray($51));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = function ($52) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($52));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                       
  var singleton = $foreign._singleton(singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign._take(takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var indexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var s$prime = drop(i)(s);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
              })(Data_String_CodeUnits.indexOf(p)(s$prime));
          };
      };
  };
  var codePointFromChar = function ($53) {
      return CodePoint(Data_Enum.fromEnum(Data_Enum.boundedEnumChar)($53));
  };
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["take"] = take;
  exports["drop"] = drop;
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var keySignatureAccidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "b";
      };
      return "";
  };
  exports["keySignatureAccidental"] = keySignatureAccidental;
})(PS["Data.Abc.Canonical"] = PS["Data.Abc.Canonical"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 197, column 5 - line 197, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 415, column 3 - line 420, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 412, column 1 - line 412, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 451, column 5 - line 456, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 448, column 3 - line 448, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 431, column 3 - line 431, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var White = (function () {
      function White(value0) {
          this.value0 = value0;
      };
      White.create = function (value0) {
          return new White(value0);
      };
      return White;
  })();
  var Black = (function () {
      function Black(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Black.create = function (value0) {
          return function (value1) {
              return new Black(value0, value1);
          };
      };
      return Black;
  })();
  var successor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.succ(Data_Abc.enumPitchClass)(pc));
  }; 
  var rotate = function (n) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.drop(n)(xs))(Data_Array.take(n)(xs));
      };
  };   
  var predecessor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.pred(Data_Abc.enumPitchClass)(pc));
  };                                                                        
  var pianoOctave = [ new White(Data_Abc.C.value), new Black(Data_Abc.C.value, Data_Abc.D.value), new White(Data_Abc.D.value), new Black(Data_Abc.D.value, Data_Abc.E.value), new White(Data_Abc.E.value), new White(Data_Abc.F.value), new Black(Data_Abc.F.value, Data_Abc.G.value), new White(Data_Abc.G.value), new Black(Data_Abc.G.value, Data_Abc.A.value), new White(Data_Abc.A.value), new Black(Data_Abc.A.value, Data_Abc.B.value), new White(Data_Abc.B.value) ];
  var pianoKeyToPitch = function (isFlatCtx) {
      return function (pianoKey) {
          var convertPianoKey = function (flatCtx) {
              return function (v) {
                  if (v instanceof White) {
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Natural.value
                      });
                  };
                  if (v instanceof Black) {
                      if (flatCtx) {
                          return new Data_Abc.Pitch({
                              pitchClass: v.value1,
                              accidental: Data_Abc.Flat.value
                          });
                      };
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Sharp.value
                      });
                  };
                  throw new Error("Failed pattern match at Data.Abc.KeySignature line 397, column 5 - line 397, column 52: " + [ flatCtx.constructor.name, v.constructor.name ]);
              };
          };
          return convertPianoKey(isFlatCtx)(pianoKey);
      };
  };
  var notesInChromaticScale = 12;
  var isFSharp = function (ks) {
      return Data_Eq.eq(Data_Abc.eqPitchCLass)(ks.pitchClass)(Data_Abc.F.value) && (Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Sharp.value) && (Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Major.value) || Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Ionian.value)));
  };
  var fSharpScale = new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Sharp.value
  }), Data_List_Types.Nil.value)))))));
  var fSharpKeySet = Data_List.filter(function (v) {
      return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Sharp.value);
  })(fSharpScale);
  var eqPianoKey = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof White && y instanceof White) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0);
          };
          if (x instanceof Black && y instanceof Black) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0) && Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var distanceFromMajor = function (mode) {
      if (mode instanceof Data_Abc.Dorian) {
          return 10;
      };
      if (mode instanceof Data_Abc.Phrygian) {
          return 8;
      };
      if (mode instanceof Data_Abc.Lydian) {
          return 7;
      };
      if (mode instanceof Data_Abc.Mixolydian) {
          return 5;
      };
      if (mode instanceof Data_Abc.Aeolian) {
          return 3;
      };
      if (mode instanceof Data_Abc.Minor) {
          return 3;
      };
      if (mode instanceof Data_Abc.Locrian) {
          return 1;
      };
      if (mode instanceof Data_Abc.Major) {
          return 0;
      };
      if (mode instanceof Data_Abc.Ionian) {
          return 0;
      };
      throw new Error("Failed pattern match at Data.Abc.KeySignature line 377, column 3 - line 388, column 1: " + [ mode.constructor.name ]);
  };
  var distanceFromC = function (keySig) {
      return Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqPianoKey)(keySig)(pianoOctave));
  };
  var diatonicScaleOffsets = [ 0, 2, 4, 5, 7, 9, 11 ];
  var pianoKeyScale = function (keySig) {
      return function (mode) {
          var shift = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(distanceFromC(keySig) + distanceFromMajor(mode) | 0)(notesInChromaticScale);
          var scale = rotate(shift)(pianoOctave);
          var tonic = Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.head(scale));
          var lookup = function (key) {
              return Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.index(scale)(key));
          };
          var keys = Data_Functor.map(Data_Functor.functorArray)(lookup)(diatonicScaleOffsets);
          return new Data_Tuple.Tuple(tonic, keys);
      };
  };
  var buildPianoKey = function (v) {
      if (v.value0.accidental instanceof Data_Abc.Flat) {
          return new Black(predecessor(v.value0.pitchClass), v.value0.pitchClass);
      };
      if (v.value0.accidental instanceof Data_Abc.Sharp) {
          return new Black(v.value0.pitchClass, successor(v.value0.pitchClass));
      };
      return new White(v.value0.pitchClass);
  };
  var normaliseModalKey = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = pianoKeyScale(pianoKeySignature)(ks.mode);
      var isFlatCtx = Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Flat.value);
      var v1 = pianoKeyToPitch(isFlatCtx)(v.value0);
      return {
          pitchClass: v1.value0.pitchClass,
          accidental: v1.value0.accidental,
          mode: Data_Abc.Major.value
      };
  };
  var blackKeySet = function (keySig) {
      return function (mode) {
          var v = pianoKeyScale(keySig)(mode);
          var isBlackKey = function (v1) {
              if (v1 instanceof White) {
                  return false;
              };
              if (v1 instanceof Black) {
                  return true;
              };
              throw new Error("Failed pattern match at Data.Abc.KeySignature line 340, column 5 - line 340, column 38: " + [ v1.constructor.name ]);
          };
          return Data_Tuple.Tuple.create(v.value0)(Data_Array.filter(isBlackKey)(v.value1));
      };
  };
  var keySet = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = blackKeySet(pianoKeySignature)(ks.mode);
      var isFlatCtx = (function () {
          if (v.value0 instanceof White && v.value0.value0 instanceof Data_Abc.F) {
              return true;
          };
          if (v.value0 instanceof White) {
              return false;
          };
          return true;
      })();
      var basicKeySet = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(pianoKeyToPitch(isFlatCtx))(v.value1));
      var $119 = isFSharp(ks);
      if ($119) {
          return fSharpKeySet;
      };
      if (v.value0 instanceof Black && (v.value0.value0 instanceof Data_Abc.F && v.value0.value1 instanceof Data_Abc.G)) {
          return new Data_List_Types.Cons(new Data_Abc.Pitch({
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Flat.value
          }), basicKeySet);
      };
      return basicKeySet;
  };
  exports["notesInChromaticScale"] = notesInChromaticScale;
  exports["keySet"] = keySet;
  exports["normaliseModalKey"] = normaliseModalKey;
})(PS["Data.Abc.KeySignature"] = PS["Data.Abc.KeySignature"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var isEmptyStave = function (bars) {
      var isEmptyBar = function (bar) {
          var f = function (music$prime) {
              if (music$prime instanceof Data_Abc.Spacer) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Ignore) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Continuation) {
                  return true;
              };
              return false;
          };
          return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(bar.music) || Data_List["null"](bar.music);
      };
      return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isEmptyBar)(bars);
  };
  var getHeaderMap = function (t) {
      var f = function (h) {
          if (h instanceof Data_Abc.Area) {
              return new Data_Tuple.Tuple("A", h);
          };
          if (h instanceof Data_Abc.Book) {
              return new Data_Tuple.Tuple("B", h);
          };
          if (h instanceof Data_Abc.Composer) {
              return new Data_Tuple.Tuple("C", h);
          };
          if (h instanceof Data_Abc.Discography) {
              return new Data_Tuple.Tuple("D", h);
          };
          if (h instanceof Data_Abc.FileUrl) {
              return new Data_Tuple.Tuple("F", h);
          };
          if (h instanceof Data_Abc.Group) {
              return new Data_Tuple.Tuple("G", h);
          };
          if (h instanceof Data_Abc.History) {
              return new Data_Tuple.Tuple("H", h);
          };
          if (h instanceof Data_Abc.Instruction) {
              return new Data_Tuple.Tuple("I", h);
          };
          if (h instanceof Data_Abc.Key) {
              return new Data_Tuple.Tuple("K", h);
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Tuple.Tuple("L", h);
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Tuple.Tuple("M", h);
          };
          if (h instanceof Data_Abc.Macro) {
              return new Data_Tuple.Tuple("m", h);
          };
          if (h instanceof Data_Abc.Notes) {
              return new Data_Tuple.Tuple("N", h);
          };
          if (h instanceof Data_Abc.Origin) {
              return new Data_Tuple.Tuple("O", h);
          };
          if (h instanceof Data_Abc.Parts) {
              return new Data_Tuple.Tuple("P", h);
          };
          if (h instanceof Data_Abc.Tempo) {
              return new Data_Tuple.Tuple("Q", h);
          };
          if (h instanceof Data_Abc.Rhythm) {
              return new Data_Tuple.Tuple("R", h);
          };
          if (h instanceof Data_Abc.Remark) {
              return new Data_Tuple.Tuple("r", h);
          };
          if (h instanceof Data_Abc.Source) {
              return new Data_Tuple.Tuple("S", h);
          };
          if (h instanceof Data_Abc.SymbolLine) {
              return new Data_Tuple.Tuple("s", h);
          };
          if (h instanceof Data_Abc.Title) {
              return new Data_Tuple.Tuple("T", h);
          };
          if (h instanceof Data_Abc.UserDefined) {
              return new Data_Tuple.Tuple("U", h);
          };
          if (h instanceof Data_Abc.Voice) {
              return new Data_Tuple.Tuple("V", h);
          };
          if (h instanceof Data_Abc.WordsAfter) {
              return new Data_Tuple.Tuple("W", h);
          };
          if (h instanceof Data_Abc.WordsAligned) {
              return new Data_Tuple.Tuple("w", h);
          };
          if (h instanceof Data_Abc.ReferenceNumber) {
              return new Data_Tuple.Tuple("X", h);
          };
          if (h instanceof Data_Abc.Transcription) {
              return new Data_Tuple.Tuple("Z", h);
          };
          if (h instanceof Data_Abc.FieldContinuation) {
              return new Data_Tuple.Tuple("+", h);
          };
          if (h instanceof Data_Abc.Comment) {
              return new Data_Tuple.Tuple("-", h);
          };
          if (h instanceof Data_Abc.UnsupportedHeader) {
              return new Data_Tuple.Tuple("u", h);
          };
          throw new Error("Failed pattern match at Data.Abc.Metadata line 51, column 7 - line 140, column 22: " + [ h.constructor.name ]);
      };
      var annotatedHeaders = Data_Functor.map(Data_List_Types.functorList)(f)(Data_List.reverse(t.headers));
      return Data_Map_Internal.fromFoldable(Data_Ord.ordChar)(Data_List_Types.foldableList)(annotatedHeaders);
  };
  var getHeader = function (code) {
      return function (t) {
          return Data_Map_Internal.lookup(Data_Ord.ordChar)(code)(getHeaderMap(t));
      };
  };
  var getKeySig = function (tune) {
      var v = getHeader("K")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Key) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getMeter = function (tune) {
      var v = getHeader("M")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Meter) {
          return new Data_Maybe.Just(Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))(v.value0.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var getUnitNoteLength = function (tune) {
      var v = getHeader("L")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.UnitNoteLength) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var dotFactor = function (i) {
      if (i === 1) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
      };
      if (i === 2) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(4);
      };
      if (i === 3) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(7)(8);
      };
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(0)(1);
  };
  exports["getHeader"] = getHeader;
  exports["getKeySig"] = getKeySig;
  exports["getMeter"] = getMeter;
  exports["getUnitNoteLength"] = getUnitNoteLength;
  exports["dotFactor"] = dotFactor;
  exports["isEmptyStave"] = isEmptyStave;
})(PS["Data.Abc.Metadata"] = PS["Data.Abc.Metadata"] || {});
(function(exports) {
    "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArray (array) {
    return array.join("");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function stripDiacritics (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    return s.split(/\s+/);
  }                                          
  exports.includes           = includes;
  exports.startsWith         = startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];         
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var adaptMaybe = function (f) {
      return function ($52) {
          return Data_Maybe.fromJust()(f(toArray($52)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  exports["toArray"] = toArray;
  exports["head"] = head;
})(PS["Data.Array.NonEmpty"] = PS["Data.Array.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["match"] = match;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Utils"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["includes"] = $foreign.includes;
  exports["startsWith"] = $foreign.startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($80) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return {
                      result: f(v1.result),
                      suffix: v1.suffix
                  };
              })(v($80));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser line 88, column 7 - line 88, column 70: " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["unParser"] = unParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["plusParser"] = plusParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadParser"] = monadParser;
  exports["monadRecParser"] = monadRecParser;
})(PS["Text.Parsing.StringParser"] = PS["Text.Parsing.StringParser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];                 
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var optionMaybe = function (p) {
      return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List_NonEmpty.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(Data_List_NonEmpty.cons(v)(acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(v));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(many1Till(p)(end)));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(cons$prime)(p))(many(p));
  };
  var sepBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(cons$prime(v)(v1));
              });
          });
      };
  };
  var sepBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(sepBy1(p)(sep)))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  var choice = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
  };
  var between = function (open) {
      return function (close) {
          return function (p) {
              return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
          };
      };
  };
  exports["many"] = many;
  exports["many1"] = many1;
  exports["withError"] = withError;
  exports["between"] = between;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["choice"] = choice;
  exports["manyTill"] = manyTill;
  exports["many1Till"] = many1Till;
})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];                 
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String_CodePoints.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var v = Data_String_CodeUnits.stripPrefix("^")(pat);
          if (v instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String_CodePoints.drop(v.pos)(v.str);
              var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.head)(Data_String_Regex.match(r)(remainder));
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v1.value0.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + Data_String_CodePoints.length(v1.value0.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos,
                  error: new Text_Parsing_StringParser.ParseError("no match")
              });
          };
      };
      var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if (v instanceof Data_Either.Right) {
          return matchRegex(v.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 123, column 3 - line 127, column 19: " + [ v.constructor.name ]);
  };
  var eof = function (s) {
      if (s.pos < Data_String_CodePoints.length(s.str)) {
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected EOF")
          });
      };
      return new Data_Either.Right({
          result: Data_Unit.unit,
          suffix: s
      });
  };
  var anyChar = function (v) {
      var v1 = Data_String_CodeUnits.charAt(v.pos)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: v1.value0,
              suffix: {
                  str: v.str,
                  pos: v.pos + 1 | 0
              }
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 47, column 3 - line 49, column 64: " + [ v1.constructor.name ]);
  };  
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
          var $41 = f(v);
          if ($41) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  exports["eof"] = eof;
  exports["anyChar"] = anyChar;
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["regex"] = regex;
})(PS["Text.Parsing.StringParser.String"] = PS["Text.Parsing.StringParser.String"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Utils = PS["Data.String.Utils"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];                 
  var TempoDesignation = (function () {
      function TempoDesignation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TempoDesignation.create = function (value0) {
          return function (value1) {
              return new TempoDesignation(value0, value1);
          };
      };
      return TempoDesignation;
  })();
  var tupletLength = Text_Parsing_StringParser_String.regex("[2-9]");
  var tup = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Control_Bind.join(Data_Maybe.bindMaybe))(Text_Parsing_StringParser_Combinators.optionMaybe(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"](":"))(Text_Parsing_StringParser_Combinators.optionMaybe(tupletLength))));
  var toTupletInt = function (s) {
      return Data_Maybe.fromMaybe(3)(Data_Int.fromString(s));
  };
  var tab = Text_Parsing_StringParser_String["char"]("\x09");
  var strToEol = Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*");
  var space = Text_Parsing_StringParser_String["char"](" ");
  var whiteSpace = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(function ($47) {
      return Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar($47));
  }))(Text_Parsing_StringParser_Combinators.many(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ space, tab ])));
  var unsupportedHeaderCode = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[a-qt-vx-zEJ]:"))(whiteSpace);
  var unsupportedHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.UnsupportedHeader.value)(unsupportedHeaderCode))(strToEol))("unsupported header");
  var slur = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Slur.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("("))(Text_Parsing_StringParser_String["char"](")"))))("slur");
  var shortDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.regex("[\\.~HLMOPSTuv]"))("short decoration");
  var sharpOrFlat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (x) {
      var $9 = x === "#";
      if ($9) {
          return Data_Abc.Sharp.value;
      };
      return Data_Abc.Flat.value;
  })(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("#"))(Text_Parsing_StringParser_String["char"]("b")));
  var scoreSpace = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tab, Text_Parsing_StringParser_String["char"]("y"), space ]);
  var spacer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Spacer.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.length)(Text_Parsing_StringParser_Combinators.many1(scoreSpace))))("space");
  var scientificPitchNotation = function (pc) {
      return function (oct) {
          var $10 = Data_String_Utils.includes(pc)("ABCDEFG");
          if ($10) {
              return Data_Abc.middlecOctave + oct | 0;
          };
          return (Data_Abc.middlecOctave + 1 | 0) + oct | 0;
      };
  };
  var runParser1 = function (v) {
      return function (s) {
          var formatErr = function (v1) {
              return {
                  pos: v1.pos,
                  error: v1.error.value0
              };
          };
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(formatErr)(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  };
  var quotedString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("(\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("quoted string");
  var spacedQuotedString = Text_Parsing_StringParser["try"](Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(quotedString))(whiteSpace));
  var pitch = Text_Parsing_StringParser_String.regex("[A-Ga-g]");
  var phrygian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Phrygian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[P|p][H|h][R|r][A-Za-z]*"));
  var octaveShift = function (s) {
      var up = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)("'"))(Data_String_CodeUnits.toCharArray(s)));
      var down = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)(","))(Data_String_CodeUnits.toCharArray(s)));
      return up - down | 0;
  };
  var nometer = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Maybe.Nothing.value)(Text_Parsing_StringParser_String.string("none"));
  var newline = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.satisfy(Data_Eq.eq(Data_Eq.eqChar)("\x0a")))("expected newline");
  var moveOctave = Data_Functor.map(Text_Parsing_StringParser.functorParser)(octaveShift)(Text_Parsing_StringParser_String.regex("[',]*"));
  var mixolydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Mixolydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][I|i][X|x][A-Za-z]*"));
  var minor = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Minor.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A-Za-z]*"));
  var maybeTie = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("-")))("tie");
  var manyTill1 = Text_Parsing_StringParser_Combinators.manyTill;
  var major = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Major.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A|a][J|j][A-Za-z]*"));
  var lydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Lydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][Y|y][D|d][A-Za-z]*"));
  var lookupPitch = function (p) {
      var v = Data_String_Common.toUpper(p);
      if (v === "A") {
          return Data_Abc.A.value;
      };
      if (v === "B") {
          return Data_Abc.B.value;
      };
      if (v === "C") {
          return Data_Abc.C.value;
      };
      if (v === "D") {
          return Data_Abc.D.value;
      };
      if (v === "E") {
          return Data_Abc.E.value;
      };
      if (v === "F") {
          return Data_Abc.F.value;
      };
      if (v === "G") {
          return Data_Abc.G.value;
      };
      return Data_Abc.C.value;
  };
  var longDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a!]*")))("long decoration");
  var locrian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Locrian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][O|o][C|c][A-Za-z]*"));
  var keyName = Text_Parsing_StringParser_String.regex("[A-G]");
  var ionian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ionian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[I|i][O|o][N|n][A-Za-z]*"));
  var invisibleBarType = {
      thickness: Data_Abc.Invisible.value,
      repeat: Data_Maybe.Nothing.value,
      iteration: Data_Maybe.Nothing.value
  };
  var inlineInfo = function (isInline) {
      var pattern = (function () {
          if (isInline) {
              return "[^\x0d\x0a\\[\\]]*";
          };
          return "[^\x0d\x0a]*";
      })();
      return Text_Parsing_StringParser_String.regex(pattern);
  };
  var ignore = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ignore.value)(Text_Parsing_StringParser_String.regex("[#@;`\\*\\?]+")))("ignored character");
  var headerCode = function (c) {
      var pattern = Data_String_CodeUnits.fromCharArray([ c, ":" ]);
      return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string(pattern))(whiteSpace);
  };
  var history = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.History.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("H"))(strToEol)))("H header");
  var instruction = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Instruction.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("I"))(inlineInfo(isInline))))("I header");
  };
  var macro = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Macro.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("m"))(inlineInfo(isInline))))("m header");
  };
  var notes = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Notes.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("N"))(inlineInfo(isInline))))("N header");
  };
  var origin = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Origin.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("O"))(strToEol)))("O header");
  var parts = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Parts.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("P"))(inlineInfo(isInline))))("P header");
  };
  var remark = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Remark.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("r"))(inlineInfo(isInline))))("r header");
  };
  var rhythm = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rhythm.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("R"))(inlineInfo(isInline))))("R header");
  };
  var source = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Source.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("S"))(strToEol)))("S header");
  var symbolLine = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.SymbolLine.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("s"))(inlineInfo(isInline))))("s header");
  };
  var title = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Title.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("T"))(inlineInfo(isInline))))("T header");
  };
  var transcription = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Transcription.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Z"))(strToEol)))("Z header");
  var userDefined = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UserDefined.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("U"))(inlineInfo(isInline))))("U header");
  };
  var voice = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Voice.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("V"))(inlineInfo(isInline))))("V header");
  };
  var wordsAfter = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAfter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("W"))(inlineInfo(isInline))))("W header");
  };
  var wordsAligned = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAligned.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("w"))(inlineInfo(isInline))))("w header");
  };
  var tuneBodyOnlyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ symbolLine(isInline), wordsAligned(isInline) ]))("tune body only info");
  };
  var group = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Group.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("G"))(strToEol)))("G header");
  var fileUrl = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FileUrl.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("F"))(strToEol)))("F header");
  var fieldContinuation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FieldContinuation.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("+"))(strToEol)))("field continuation");
  var endOfLine = Text_Parsing_StringParser_String.regex("\x0d\x0a");
  var dorian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Dorian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[D|d][O|o][R|r][A-Za-z]*"));
  var discography = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Discography.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("D"))(strToEol)))("D header");
  var decoration = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Decoration.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(shortDecoration)(longDecoration)))("decoration");
  var cutTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(2, 2)))(Text_Parsing_StringParser_String.string("C|"));
  var crlf = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)("\x0a")(endOfLine))("expected crlf");
  var eol = Control_Alt.alt(Text_Parsing_StringParser.altParser)(newline)(crlf);
  var continuation = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Continuation.value)(Text_Parsing_StringParser_String["char"]("\\")))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*")))("continuation");
  var composer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Composer.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("C"))(strToEol)))("C header");
  var commonTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(4, 4)))(Text_Parsing_StringParser_String["char"]("C"));
  var comment = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Comment.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("%"))(strToEol)))("comment");
  var chordSymbol = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ChordSymbol.create)(quotedString))("chord symbol");
  var buildTupletSignature = function (ps) {
      return function (mq) {
          return function (mr) {
              var p = toTupletInt(ps);
              var qdefault = (function () {
                  if (p === 2) {
                      return 3;
                  };
                  if (p === 3) {
                      return 2;
                  };
                  if (p === 4) {
                      return 3;
                  };
                  if (p === 6) {
                      return 2;
                  };
                  if (p === 8) {
                      return 3;
                  };
                  return 2;
              })();
              var q = Data_Maybe.fromMaybe(qdefault)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mq));
              var r = Data_Maybe.fromMaybe(p)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mr));
              return {
                  p: p,
                  q: q,
                  r: r
              };
          };
      };
  };
  var tupletSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTupletSignature)(tupletLength))(tup))(tup))(whiteSpace);
  var buildTempoSignature3 = function (bpm) {
      var noteLengths = Data_List_NonEmpty.singleton(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(4));
      return {
          noteLengths: noteLengths,
          bpm: bpm,
          marking: Data_Maybe.Nothing.value
      };
  };
  var buildTempoSignature = function (marking) {
      return function (td) {
          return {
              noteLengths: td.value0,
              bpm: td.value1,
              marking: marking
          };
      };
  };
  var buildTempoSignature2 = function (marking) {
      return function (td) {
          return buildTempoSignature(new Data_Maybe.Just(marking))(td);
      };
  };
  var buildRest = function (r) {
      return {
          duration: r
      };
  };
  var buildRationalFromSlashList = function (xs) {
      var f = function (i) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(Data_Int.pow(2)(i));
      };
      return f(Data_List_NonEmpty.length(xs));
  };
  var manySlashes = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRationalFromSlashList)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.cons)(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_String["char"]("/"))));
  var buildPitch = function (a) {
      return function (pitchStr) {
          return new Data_Abc.Pitch({
              pitchClass: lookupPitch(pitchStr),
              accidental: a
          });
      };
  };
  var buildNote = function (macc) {
      return function (pitchStr) {
          return function (octave) {
              return function (ml) {
                  return function (mt) {
                      var tied = (function () {
                          if (mt instanceof Data_Maybe.Just) {
                              return true;
                          };
                          return false;
                      })();
                      var spn = scientificPitchNotation(pitchStr)(octave);
                      var pc = lookupPitch(Data_String_Common.toUpper(pitchStr));
                      var l = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1))(ml);
                      var acc = (function () {
                          if (macc instanceof Data_Maybe.Nothing) {
                              return Data_Abc.Implicit.value;
                          };
                          if (macc instanceof Data_Maybe.Just) {
                              return macc.value0;
                          };
                          throw new Error("Failed pattern match at Data.Abc.Parser line 1168, column 7 - line 1170, column 20: " + [ macc.constructor.name ]);
                      })();
                      return {
                          pitchClass: pc,
                          accidental: acc,
                          octave: spn,
                          duration: l,
                          tied: tied
                      };
                  };
              };
          };
      };
  };
  var buildKeySignature = function (pStr) {
      return function (ma) {
          return function (mm) {
              return {
                  pitchClass: lookupPitch(pStr),
                  accidental: ma,
                  mode: Data_Maybe.fromMaybe(Data_Abc.Major.value)(mm)
              };
          };
      };
  };
  var buildKey = function (code) {
      return function (ks) {
          return function (pitches) {
              return new Data_Abc.Key({
                  keySignature: ks,
                  modifications: pitches
              });
          };
      };
  };
  var buildChord = function (ns) {
      return function (ml) {
          var l = Data_Maybe.fromMaybe(Data_Rational.fromInt(1))(ml);
          return {
              notes: ns,
              duration: l
          };
      };
  };
  var buildBrokenOperator = function (s) {
      var $27 = Data_String_Utils.startsWith("<")(s);
      if ($27) {
          return new Data_Abc.LeftArrow(Data_String_CodePoints.length(s));
      };
      return new Data_Abc.RightArrow(Data_String_CodePoints.length(s));
  };
  var buildBarline = function (s) {
      return function (i) {
          var thickness = (function () {
              var $28 = Data_String_Utils.includes("|]")(s);
              if ($28) {
                  return Data_Abc.ThinThick.value;
              };
              var $29 = Data_String_Utils.includes("[|")(s);
              if ($29) {
                  return Data_Abc.ThickThin.value;
              };
              var $30 = Data_String_Utils.includes("||")(s);
              if ($30) {
                  return Data_Abc.ThinThin.value;
              };
              return Data_Abc.Thin.value;
          })();
          var f = function (c) {
              if (c === "[") {
                  return "|";
              };
              if (c === "]") {
                  return "|";
              };
              return c;
          };
          var normalised = Data_Functor.map(Data_Functor.functorArray)(f)(Data_String_CodeUnits.toCharArray(s));
          var repeatCount = Data_Array.length(Data_Array.filter(function (c) {
              return c === ":";
          })(normalised));
          var repeat = (function () {
              var $32 = repeatCount === 0;
              if ($32) {
                  return Data_Maybe.Nothing.value;
              };
              var $33 = repeatCount === 1;
              if ($33) {
                  var $34 = Data_String_Utils.includes(":|")(Data_String_CodeUnits.fromCharArray(normalised));
                  if ($34) {
                      return new Data_Maybe.Just(Data_Abc.End.value);
                  };
                  return new Data_Maybe.Just(Data_Abc.Begin.value);
              };
              return new Data_Maybe.Just(Data_Abc.BeginAndEnd.value);
          })();
          return {
              thickness: thickness,
              repeat: repeat,
              iteration: i
          };
      };
  };
  var buildBarTypeRecord = function (t) {
      return function (r) {
          return function (i) {
              return {
                  thickness: t,
                  repeat: r,
                  iteration: i
              };
          };
      };
  };
  var buildBar = function (bt) {
      return function (m) {
          return {
              startLine: bt,
              music: m
          };
      };
  };
  var buildAnnotation = function (s) {
      var firstChar = Data_String_CodeUnits.charAt(0)(s);
      var placement = (function () {
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "^") {
              return Data_Abc.AboveNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "_") {
              return Data_Abc.BelowNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "<") {
              return Data_Abc.LeftOfNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === ">") {
              return Data_Abc.RightOfNextSymbol.value;
          };
          return Data_Abc.Discretional.value;
      })();
      return new Data_Abc.Annotation(placement, s);
  };
  var buildAccidental = function (s) {
      if (s === "^^") {
          return Data_Abc.DoubleSharp.value;
      };
      if (s === "__") {
          return Data_Abc.DoubleFlat.value;
      };
      if (s === "^") {
          return Data_Abc.Sharp.value;
      };
      if (s === "_") {
          return Data_Abc.Flat.value;
      };
      return Data_Abc.Natural.value;
  };
  var buildAbcTune = function (hs) {
      return function (b) {
          return {
              headers: hs,
              body: b
          };
      };
  };
  var brokenRhythmOperator = Text_Parsing_StringParser_String.regex("(<+|>+)");
  var brokenRhythmTie = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBrokenOperator)(brokenRhythmOperator))(whiteSpace);
  var book = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Book.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("B"))(strToEol)))("B Header");
  var barSeparator = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("[|"), Text_Parsing_StringParser_String.string("|]:"), Text_Parsing_StringParser_String.string("|]"), Text_Parsing_StringParser_String.string("]|:"), Text_Parsing_StringParser_String.string("]|"), Text_Parsing_StringParser_String.string(":[|"), Text_Parsing_StringParser_String.string("|:"), Text_Parsing_StringParser_String.string(":|:"), Text_Parsing_StringParser_String.string(":||:"), Text_Parsing_StringParser_String.string(":|]"), Text_Parsing_StringParser_String.string(":||"), Text_Parsing_StringParser_String.string(":|"), Text_Parsing_StringParser_String.string("::"), Text_Parsing_StringParser_String.string("||:"), Text_Parsing_StringParser_String.string("||"), Text_Parsing_StringParser_String.string("|") ]);
  var area = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Area.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("A"))(strToEol)))("A header");
  var anyInt = Text_Parsing_StringParser_String.regex("(0|[1-9][0-9]*)");
  var $$int = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.fromMaybe(1))(Data_Int.fromString))(anyInt))("expected a positive integer");
  var anyRat = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Text_Parsing_StringParser_Combinators.option(1)($$int)))(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.option(2)($$int));
  var degenerateBarRepeat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarTypeRecord(Data_Abc.Thin.value)(Data_Maybe.Nothing.value))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_String["char"]("[")))($$int)));
  var degenerateTempo = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature3)($$int);
  var integralAsRational = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.fromInt)($$int);
  var noteDur = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](manySlashes), Text_Parsing_StringParser["try"](anyRat), integralAsRational ]);
  var meterSignature = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int))(whiteSpace));
  var meterDefinition = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ cutTime, commonTime, meterSignature, nometer ]);
  var meter = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Meter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("M"))(meterDefinition)))("M header");
  var rational = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int);
  var headerRational = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var noteDuration = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var unitNoteLength = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UnitNoteLength.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("L"))(noteDuration)))("L header");
  var referenceNumber = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ReferenceNumber.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("X"))($$int)))("x header");
  var tuneInfo = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ area, book, composer, discography, fileUrl, group, history, origin, source, referenceNumber, transcription, unsupportedHeader ]))("tune info");
  var repeatSection = $$int;
  var normalBarline = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarline)(barSeparator))(Text_Parsing_StringParser_Combinators.optionMaybe(repeatSection)))("bartype");
  var barline = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ normalBarline, degenerateBarRepeat ]);
  var tempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(TempoDesignation.create)(Text_Parsing_StringParser_Combinators.many1(headerRational)))(Text_Parsing_StringParser_String["char"]("=")))($$int);
  var prefixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature2)(spacedQuotedString))(tempoDesignation);
  var suffixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Function.flip(buildTempoSignature2))(tempoDesignation))(spacedQuotedString);
  var unlabelledTempoDesignation = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature(Data_Maybe.Nothing.value))(tempoDesignation);
  var tempoSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](suffixedTempoDesignation), Text_Parsing_StringParser["try"](unlabelledTempoDesignation), degenerateTempo, prefixedTempoDesignation ]))(whiteSpace);
  var tempo = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tempo.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Q"))(tempoSignature)))("Q header");
  var annotationString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("[\\^\\>\\<-@](\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("annotation");
  var annotation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAnnotation)(annotationString))("annotation");
  var aeolian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Aeolian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[A|a][E|e][O|o][A-Za-z]*"));
  var mode = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](major), ionian, dorian, phrygian, lydian, mixolydian, aeolian, locrian, minor ]);
  var keySignature = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeySignature)(keyName))(Text_Parsing_StringParser_Combinators.option(Data_Abc.Natural.value)(sharpOrFlat)))(whiteSpace))(Text_Parsing_StringParser_Combinators.optionMaybe(mode));
  var accidental = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAccidental)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("^^"), Text_Parsing_StringParser_String.string("__"), Text_Parsing_StringParser_String.string("^"), Text_Parsing_StringParser_String.string("_"), Text_Parsing_StringParser_String.string("=") ]));
  var keyAccidental = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildPitch)(accidental))(pitch);
  var keyAccidentals = Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_Combinators.sepBy(keyAccidental)(space));
  var key = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKey)(headerCode("K")))(keySignature))(keyAccidentals))("K header");
  var anywhereInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ instruction(isInline), key, unitNoteLength, meter, macro(isInline), notes(isInline), parts(isInline), tempo, rhythm(isInline), remark(isInline), title(isInline), userDefined(isInline), voice(isInline), wordsAfter(isInline), fieldContinuation, comment ]))("anywhere info");
  };
  var informationField = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ anywhereInfo(isInline), tuneInfo ]))("header");
  };
  var header = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(informationField(false))(eol);
  var headers = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.many(header))("headers");
  var tuneBodyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tuneBodyOnlyInfo(isInline), anywhereInfo(isInline) ]))("tune body info");
  };
  var inline = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Inline.create)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(tuneBodyInfo(true))))("inline header");
  var tuneBodyHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BodyInfo.create)(tuneBodyInfo(true)))(eol))("tune body header");
  var maybeAccidental = Text_Parsing_StringParser_Combinators.optionMaybe(accidental);
  var acciaccatura = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (v) {
      return true;
  })(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("/")));
  var abcRest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRest)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.fromMaybe(Data_Rational.fromInt(1)))(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[XxZz]"))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))))("abcRest");
  var rest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rest.create)(abcRest))("rest");
  var abcNote = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildNote)(maybeAccidental))(pitch))(moveOctave))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))(maybeTie))("ABC note");
  var brokenRhythmPair = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BrokenRhythmPair.create)(abcNote))(brokenRhythmTie))(abcNote))("broken rhythm pair");
  var grace = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.GraceNote.create)(acciaccatura))(Text_Parsing_StringParser_Combinators.many1(abcNote));
  var graceNote = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("{"))(Text_Parsing_StringParser_String["char"]("}"))(grace))("grace note");
  var note = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Note.create)(abcNote);
  var restOrNote = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Left.create)(abcRest))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Right.create)(abcNote));
  var tuplet = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tuplet.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"]("("))(tupletSignature)))(Text_Parsing_StringParser_Combinators.many1(restOrNote)))("tuplet");
  var abcChord = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildChord)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(Text_Parsing_StringParser_Combinators.many1(abcNote))))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))("ABC chord");
  var chord = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Chord.create)(abcChord))("chord");
  var scoreItem = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](chord), Text_Parsing_StringParser["try"](inline), continuation, ignore, spacer, decoration, chordSymbol, annotation, graceNote, Text_Parsing_StringParser["try"](tuplet), slur, rest, Text_Parsing_StringParser["try"](brokenRhythmPair), note ]))("score item");
  var bar = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar)(barline))(Text_Parsing_StringParser_Combinators.many(scoreItem)))("bar");
  var fullyBarredLine = Text_Parsing_StringParser_Combinators.withError(manyTill1(bar)(eol))("fully barred line");
  var introBar = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar(invisibleBarType))(Text_Parsing_StringParser_Combinators.many(scoreItem)))("intro bar");
  var introLine = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(introBar))(manyTill1(bar)(eol)))("intro line");
  var score = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Score.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(introLine)(fullyBarredLine)))("score");
  var body = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(score))(Text_Parsing_StringParser_Combinators.manyTill(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](tuneBodyHeader))(score))(Text_Parsing_StringParser_String.eof));
  var abc = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAbcTune)(headers))(body);
  var parse = function (s) {
      var v = runParser1(abc)(s);
      if (v instanceof Data_Either.Right) {
          return new Data_Either.Right(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(v.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Parser line 1441, column 5 - line 1446, column 19: " + [ v.constructor.name ]);
  };
  exports["parse"] = parse;
})(PS["Data.Abc.Parser"] = PS["Data.Abc.Parser"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
  var blomgren = "X:11\x0d\x0a" + ("T:Polon\xe4s i Gm efter Jean E Blomgren\x0d\x0a" + ("R:Sl\xe4ngpolska\x0d\x0a" + ("M:3/4\x0d\x0a" + ("L:1/16\x0d\x0a" + ("K:Gm\x0d\x0a" + ("GFGA B4 A4 | G2g2 bagf g2d2 | edcB dcBA cBAG | F2G2 A2d2 D4 | \x0d\x0a" + ("GFGA B4 A4 | G2g2 bagf g2d2 | edcB dcBA cBAG | FAdF G4 G,4 :: \x0d\x0a" + ("BdBG BdBG BdBG | c2cd e2d2 c2B2 | AcAF AcAF AcAF | BABc d2B2 A2F2 | \x0d\x0a" + "GFGA B4 A4 | G2g2 bagf g2d2 | edcB dcBA cBAG | FAdF G4 G,4 :|\x0d\x0a"))))))));
  exports["blomgren"] = blomgren;
})(PS["Examples.StaveAlignment.Texts"] = PS["Examples.StaveAlignment.Texts"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];                 
  var MeterChange = (function () {
      function MeterChange(value0) {
          this.value0 = value0;
      };
      MeterChange.create = function (value0) {
          return new MeterChange(value0);
      };
      return MeterChange;
  })();
  var KeyChange = (function () {
      function KeyChange(value0) {
          this.value0 = value0;
      };
      KeyChange.create = function (value0) {
          return new KeyChange(value0);
      };
      return KeyChange;
  })();
  var UnitNoteChange = (function () {
      function UnitNoteChange(value0) {
          this.value0 = value0;
      };
      UnitNoteChange.create = function (value0) {
          return new UnitNoteChange(value0);
      };
      return UnitNoteChange;
  })();
  exports["MeterChange"] = MeterChange;
  exports["KeyChange"] = KeyChange;
  exports["UnitNoteChange"] = UnitNoteChange;
})(PS["VexFlow.Abc.ContextChange"] = PS["VexFlow.Abc.ContextChange"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var TickableContext = (function () {
      function TickableContext(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TickableContext.create = function (value0) {
          return function (value1) {
              return new TickableContext(value0, value1);
          };
      };
      return TickableContext;
  })();
  var tickableSemigroupCtx = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new TickableContext(v.value0 + v1.value0 | 0, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(v.value1)(v1.value1));
      };
  });
  var tickableMonoidCtx = new Data_Monoid.Monoid(function () {
      return tickableSemigroupCtx;
  }, new TickableContext(0, Data_Rational.fromInt(0)));
  var tickableCountWidth = function (n) {
      if (n === 1) {
          return 1.5;
      };
      if (n === 2) {
          return 2.5;
      };
      return Data_Int.toNumber(n);
  };
  var pixelsPerItem = 35.0;
  var keySignatureWidth = function (keySignature) {
      var v = Data_List.length(Data_Abc_KeySignature.keySet(keySignature));
      if (v === 0) {
          return 0.0;
      };
      if (v === 1) {
          return 1.0;
      };
      if (v === 2) {
          return 1.0;
      };
      return 1.5;
  };
  var getRorNsDuration = function (rOrNs) {
      var f = function (acc) {
          return function (rOrN) {
              if (rOrN instanceof Data_Either.Left) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.duration)(acc);
              };
              if (rOrN instanceof Data_Either.Right) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.duration)(acc);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.TickableContext line 69, column 7 - line 71, column 42: " + [ rOrN.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(Data_Rational.fromInt(0))(rOrNs);
  };
  var getTickableContext = function (m) {
      if (m instanceof Data_Abc.Note) {
          return new TickableContext(1, m.value0.duration);
      };
      if (m instanceof Data_Abc.Rest) {
          return new TickableContext(1, m.value0.duration);
      };
      if (m instanceof Data_Abc.Chord) {
          var abcNote = Data_List_NonEmpty.head(m.value0.notes);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(abcNote.duration);
          return new TickableContext(1, duration);
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          return new TickableContext(2, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(m.value2.duration));
      };
      if (m instanceof Data_Abc.Tuplet) {
          var reduction = Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(m.value0.q)(m.value0.p);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(reduction)(getRorNsDuration(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1)));
          return new TickableContext(m.value0.r, duration);
      };
      return Data_Monoid.mempty(tickableMonoidCtx);
  };
  var countGraceNoteGroups = function (ms) {
      var sumGrace = function (acc) {
          return function (m) {
              if (m instanceof Data_Abc.GraceNote) {
                  return acc + 1.0;
              };
              return acc;
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(sumGrace)(0.0)(ms);
  };
  var estimateBarWidth = function (hasClef) {
      return function (hasTimeSig) {
          return function (maybeKeySig) {
              return function (abcBar) {
                  var v = Data_Foldable.foldMap(Data_List_Types.foldableList)(tickableMonoidCtx)(getTickableContext)(abcBar.music);
                  var timeSigCount = (function () {
                      if (hasTimeSig) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  var keySigCount = Data_Maybe.maybe(0.0)(keySignatureWidth)(maybeKeySig);
                  var graceCount = countGraceNoteGroups(abcBar.music);
                  var clefCount = (function () {
                      if (hasClef) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  return Data_Int.round((clefCount + timeSigCount + keySigCount + tickableCountWidth(v.value0) + 0.5 * graceCount) * pixelsPerItem);
              };
          };
      };
  };
  exports["pixelsPerItem"] = pixelsPerItem;
  exports["TickableContext"] = TickableContext;
  exports["getTickableContext"] = getTickableContext;
  exports["getRorNsDuration"] = getRorNsDuration;
  exports["estimateBarWidth"] = estimateBarWidth;
  exports["keySignatureWidth"] = keySignatureWidth;
  exports["tickableCountWidth"] = tickableCountWidth;
  exports["countGraceNoteGroups"] = countGraceNoteGroups;
  exports["tickableSemigroupCtx"] = tickableSemigroupCtx;
  exports["tickableMonoidCtx"] = tickableMonoidCtx;
})(PS["VexFlow.Abc.TickableContext"] = PS["VexFlow.Abc.TickableContext"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var isEndVolta = function (barType) {
      return function (isEmptyBar) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.Begin.value)) || (Data_Eq.eq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.ThinThick.value) || (Data_Eq.eq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.ThickThin.value) || isEmptyBar))));
      };
  };
  var isMidVolta = function (barType) {
      return function (isEmptyBar) {
          return function (current) {
              var $1 = Data_Maybe.isJust(barType.iteration);
              if ($1) {
                  return true;
              };
              var $2 = isEndVolta(barType)(isEmptyBar);
              if ($2) {
                  return false;
              };
              return current;
          };
      };
  };
  var startVolta = function (barType) {
      return function (isEmptyBar) {
          return function (isCurrentlyMidVolta) {
              if (barType.iteration instanceof Data_Maybe.Nothing) {
                  if (isCurrentlyMidVolta) {
                      var $5 = isEndVolta(barType)(isEmptyBar);
                      if ($5) {
                          return Data_Maybe.Nothing.value;
                      };
                      return new Data_Maybe.Just({
                          voltaType: 3,
                          iteration: ""
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (barType.iteration instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just({
                      voltaType: 2,
                      iteration: Data_Show.show(Data_Show.showInt)(barType.iteration.value0)
                  });
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Volta line 42, column 3 - line 56, column 13: " + [ barType.iteration.constructor.name ]);
          };
      };
  };
  var completeVolta = function (mvolta) {
      if (mvolta instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (mvolta instanceof Data_Maybe.Just) {
          var newVoltaType = (function () {
              if (mvolta.value0.voltaType === 2) {
                  return 5;
              };
              if (mvolta.value0.voltaType === 3) {
                  return 4;
              };
              return mvolta.value0.voltaType;
          })();
          return Data_Maybe.Just.create({
              voltaType: newVoltaType,
              iteration: mvolta.value0.iteration
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Volta line 63, column 3 - line 78, column 48: " + [ mvolta.constructor.name ]);
  };
  exports["startVolta"] = startVolta;
  exports["completeVolta"] = completeVolta;
  exports["isMidVolta"] = isMidVolta;
})(PS["VexFlow.Abc.Volta"] = PS["VexFlow.Abc.Volta"] || {});
(function(exports) {
    "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var staveIndentation = 10;
  var musicSpecSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "contextChanges";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "noteSpecs";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tickableContext";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "ties";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tuplets";
          }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(v)(v1);
      };
  });
  var musicSpecMonoid = new Data_Monoid.Monoid(function () {
      return musicSpecSemigroup;
  }, {
      noteSpecs: [  ],
      tuplets: [  ],
      ties: [  ],
      tickableContext: Data_Monoid.mempty(VexFlow_Abc_TickableContext.tickableMonoidCtx),
      contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray)
  });
  exports["staveIndentation"] = staveIndentation;
  exports["musicSpecSemigroup"] = musicSpecSemigroup;
  exports["musicSpecMonoid"] = musicSpecMonoid;
})(PS["VexFlow.Types"] = PS["VexFlow.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Metadata = PS["Data.Abc.Metadata"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var updateAbcContext = function (abcContext) {
      return function (change) {
          if (change instanceof VexFlow_Abc_ContextChange.MeterChange) {
              var timeSignature = {
                  numerator: change.value0.value0,
                  denominator: change.value0.value1
              };
              return {
                  timeSignature: timeSignature,
                  keySignature: abcContext.keySignature,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: true,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: change.value0.keySignature,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: abcContext.keySignature,
                  unitNoteLength: change.value0,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys
              };
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Utils line 145, column 3 - line 161, column 19: " + [ change.constructor.name ]);
      };
  };
  var noteTicks = function (ctx) {
      return function (d) {
          return Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(ctx.unitNoteLength)(d))(Data_Rational.fromInt(128))));
      };
  };
  var normaliseBroken = function (broken) {
      return function (n1) {
          return function (n2) {
              var up = function (i) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              var down = function (i) {
                  return Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              if (broken instanceof Data_Abc.LeftArrow) {
                  var right = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(up(broken.value0)),
                      accidental: n2.accidental,
                      octave: n2.octave,
                      pitchClass: n2.pitchClass,
                      tied: n2.tied
                  };
                  var left = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(down(broken.value0)),
                      accidental: n1.accidental,
                      octave: n1.octave,
                      pitchClass: n1.pitchClass,
                      tied: n1.tied
                  };
                  return new Data_Tuple.Tuple(left, right);
              };
              if (broken instanceof Data_Abc.RightArrow) {
                  var right = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(down(broken.value0)),
                      accidental: n2.accidental,
                      octave: n2.octave,
                      pitchClass: n2.pitchClass,
                      tied: n2.tied
                  };
                  var left = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(up(broken.value0)),
                      accidental: n1.accidental,
                      octave: n1.octave,
                      pitchClass: n1.pitchClass,
                      tied: n1.tied
                  };
                  return new Data_Tuple.Tuple(left, right);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Utils line 98, column 5 - line 117, column 30: " + [ broken.constructor.name ]);
          };
      };
  };
  var nextStaveNo = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(0);
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(v.value0 + 1 | 0);
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Utils line 172, column 1 - line 172, column 38: " + [ v.constructor.name ]);
  };
  var isEmptyMusicSpec = function (v) {
      return Data_Array["null"](v.noteSpecs);
  };
  var dotCount = function (ctx) {
      return function (d) {
          var v = noteTicks(ctx)(d);
          if (v === 112) {
              return 2;
          };
          if (v === 96) {
              return 1;
          };
          if (v === 56) {
              return 2;
          };
          if (v === 48) {
              return 1;
          };
          if (v === 28) {
              return 2;
          };
          if (v === 24) {
              return 1;
          };
          if (v === 14) {
              return 2;
          };
          if (v === 12) {
              return 1;
          };
          if (v === 7) {
              return 2;
          };
          if (v === 6) {
              return 1;
          };
          if (v === 3) {
              return 1;
          };
          return 0;
      };
  };
  var noteDotCount = function (ctx) {
      return function (abcNote) {
          return dotCount(ctx)(abcNote.duration);
      };
  };
  var canvasHeight = function (tune) {
      return Data_List.length(tune.body) * 100 | 0;
  };
  var cMajor = {
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Natural.value,
      mode: Data_Abc.Major.value
  };
  var initialAbcContext = function (tune) {
      return function (config) {
          var meterSignature = Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))(Data_Abc_Metadata.getMeter(tune));
          var unitNote = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(16))(Data_Abc_Metadata.getUnitNoteLength(tune));
          var keySignature = Data_Maybe.fromMaybe(cMajor)(Data_Functor.map(Data_Maybe.functorMaybe)(function (mks) {
              return mks.keySignature;
          })(Data_Abc_Metadata.getKeySig(tune)));
          return {
              timeSignature: {
                  numerator: meterSignature.value0,
                  denominator: meterSignature.value1
              },
              keySignature: keySignature,
              unitNoteLength: unitNote,
              staveNo: Data_Maybe.Nothing.value,
              accumulatedStaveWidth: VexFlow_Types.staveIndentation,
              isMidVolta: false,
              isNewTimeSignature: false,
              maxWidth: Data_Int.round(Data_Int.toNumber(config.canvasWidth - VexFlow_Types.staveIndentation | 0) / config.scale),
              pendingGraceKeys: [  ]
          };
      };
  };
  var beatsPerBeam = function (timeSignature) {
      return function (v) {
          if (timeSignature.numerator === 3) {
              return 1;
          };
          if (timeSignature.numerator === 4) {
              var $31 = Data_Array["null"](v.tuplets);
              if ($31) {
                  return 2;
              };
              return 1;
          };
          if (timeSignature.numerator === 6) {
              return 3;
          };
          if (timeSignature.numerator === 9) {
              return 3;
          };
          if (timeSignature.numerator === 12) {
              return 3;
          };
          return 1;
      };
  };
  var applyContextChanges = function (abcContext) {
      return function (eSpec) {
          if (eSpec instanceof Data_Either.Right) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(updateAbcContext)(abcContext)(eSpec.value0.contextChanges);
          };
          return abcContext;
      };
  };
  exports["applyContextChanges"] = applyContextChanges;
  exports["beatsPerBeam"] = beatsPerBeam;
  exports["dotCount"] = dotCount;
  exports["normaliseBroken"] = normaliseBroken;
  exports["noteDotCount"] = noteDotCount;
  exports["noteTicks"] = noteTicks;
  exports["initialAbcContext"] = initialAbcContext;
  exports["updateAbcContext"] = updateAbcContext;
  exports["nextStaveNo"] = nextStaveNo;
  exports["isEmptyMusicSpec"] = isEmptyMusicSpec;
  exports["cMajor"] = cMajor;
  exports["canvasHeight"] = canvasHeight;
})(PS["VexFlow.Abc.Utils"] = PS["VexFlow.Abc.Utils"] || {});
(function(exports) {
    "use strict";

  var wrapper = function() {

    var VF = null;
    var renderer = null;
    var context = null;

    return {

      initialiseCanvas : function (config) {
        return function () {
          return wrapper.init(config);
        }
      },

      clearCanvas : function () {
        context.clear();
      },

      newStaveImpl : function (staveConfig) {
        return function (keySignature) {
          return function () {
            return wrapper.makeStave(staveConfig, keySignature);
          }
        }
      },

      displayBarBeginRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
        }
      },

      displayBarEndRepeat : function (stave) {
        return function () {
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayBarBothRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayVolta : function (stave) {
        return function (volta) {
          return function () {
            return wrapper.drawVolta(stave, volta);
          }
        }
      },

      displayStave : function (stave) {
        return function () {
          return wrapper.drawStave(stave);
        }
      },

      getStaveWidth : function (stave) {
        return function () {
          return stave.getWidth();
        }
      },

      timeSignatureImpl : function (stave) {
        return function (timeSignature) {
          return function () {
            return wrapper.drawTimeSignature(stave, timeSignature);
          }
        }
      },

      keySignatureImpl : function (stave) {
        return function (keySignature) {
          return function () {
            return wrapper.drawKeySignature(stave, keySignature, false);
          }
        }
      },

      /*
    displayNotesImpl : function (stave) {
      return function (notes) {
        return function () {
          return wrapper.drawNotes(stave, notes);
        }
      }
    },
    */  

      displayAutoBeamedNotesImpl : function (stave) {
        return function (timeSignature) {
          return function (beatsPerBeam) {
            return function (musicSpec) {
              return function () {
                return wrapper.drawAutoBeamedNotes(stave, timeSignature, beatsPerBeam, musicSpec);
              }
            }
          }
        }
      },

      displayTupletedNotesImpl : function (stave) {
        return function (timeSignature) {
          return function (beatsPerBeam) {
            return function (musicSpec) {
              return function () {
               return wrapper.drawTupletedNotes(stave, timeSignature, beatsPerBeam, musicSpec);
              }
            }
          }
        }
      },

      init: function (config) {
        // console.log(config);

        VF = Vex.Flow;
        renderer = new VF.Renderer(config.canvasDivId , VF.Renderer.Backends.SVG);
        // renderer = new VF.Renderer(config.canvasDivId, VF.Renderer.Backends.CANVAS);

        // Size our svg:
        renderer.resize(config.canvasWidth, config.canvasHeight);

        context = renderer.getContext();
        context.scale(config.scale, config.scale);
      },

      makeStave: function (staveConfig, keySignature) {

        var staveOptions = new Object();
        staveOptions.right_bar = staveConfig.hasEndLine;

        // Create a stave at the required position on the canvas.
        var stave = new VF.Stave(staveConfig.x, staveConfig.y, staveConfig.width, staveOptions);

        // Add a clef and key signature if it's the first bar in the stave
        if (staveConfig.barNo == 0) {
          wrapper.drawKeySignature (stave, keySignature, true);
        }

        return stave;
      },

      drawStave: function (stave) {
        stave.setContext(context).draw();
      },

      drawTimeSignature: function (stave, timeSignature) {
        var meter = timeSignature.numerator + "/" + timeSignature.denominator;
        stave.setTimeSignature(meter);
      },

      drawVolta: function (stave, volta) {
        console.log("volta:")
        console.log(volta);
        var voltaType;
        switch(volta.voltaType) {
          case 2:
            voltaType = VF.Volta.type.BEGIN;
            break;
          case 3:
            voltaType = VF.Volta.type.MID;
            break;
          case 4:
            voltaType = VF.Volta.type.END;
            break;
          case 5:
            voltaType = VF.Volta.type.BEGIN_END;
            break;
          default:
            voltaType = VF.Volta.type.NONE;
        }
        stave.setVoltaType(voltaType, volta.iteration, 30);
      },


      drawKeySignature: function (stave, keySignature, withClef) {
        if (withClef) {
          stave.addClef("treble");
        }
        stave.setKeySignature(keySignature);
      },

      drawAutoBeamedNotes: function (stave, timeSignature, beatsPerBeam, musicSpec) {
        console.log("drawAutoBeamedNotes")
        console.log(musicSpec);
        console.log("numerator: ", timeSignature.numerator);
        var notes = musicSpec.noteSpecs.map(wrapper.makeStaveNote);
        // notes.unshift (new VF.BarNote({ type: 'single' }));  Doesn't work
        console.log(notes);

        var ties = musicSpec.ties.map(wrapper.makeTie (notes));
        console.log(ties);

        var beams = VF.Beam.generateBeams(notes, wrapper.beamGroup(timeSignature, beatsPerBeam) );
        Vex.Flow.Formatter.FormatAndDraw(context, stave, notes);
        ties.forEach(function(t) {t.setContext(context).draw()})
        beams.forEach(function(b) {b.setContext(context).draw()});
      },

      drawTupletedNotes: function (stave, timeSignature, beatsPerBeam, musicSpec) {
        console.log("drawTupletedNotes")
        console.log(musicSpec);
        var notes = musicSpec.noteSpecs.map(wrapper.makeStaveNote);
        var tuplets = musicSpec.tuplets.map(wrapper.makeTupletLayout (notes));
        var ties = musicSpec.ties.map(wrapper.makeTie (notes));

        var beams = VF.Beam.generateBeams(notes, wrapper.beamGroup(timeSignature, beatsPerBeam) );
        Vex.Flow.Formatter.FormatAndDraw(context, stave, notes);
        beams.forEach(function(b) {b.setContext(context).draw()});
        ties.forEach(function(t) {t.setContext(context).draw()})
        tuplets.forEach(function(tuplet){
          tuplet.setContext(context).draw();
        });
      },

      /* too simple to be useful
    drawNotes: function (stave, noteSpec) {
      console.log(noteSpec);
      // var notes = notesSpec.map(new VF.StaveNote);
      var notes = noteSpec.map(wrapper.makeStaveNote);
      console.log(notes);
      // Create a voice in 6/8 and add above notes
      var voice = new VF.Voice({num_beats: 6,  beat_value: 8});
      voice.addTickables(notes);

      // Format and justify the notes to 400 pixels.
      var formatter = new VF.Formatter().joinVoices([voice]).format([voice], 400);

      // Render voice
      voice.draw(context, stave);
    },
    */  

      // make a stave note (n.b. this can represent a single note or a chord)
      makeStaveNote: function (noteSpec) {
        var sn = new VF.StaveNote(noteSpec.vexNote);
        wrapper.addAccidentals (sn, noteSpec.accidentals);
        wrapper.addDots (sn, noteSpec.dots);

        if (noteSpec.graceKeys.length > 0) {
          var graceNotes = noteSpec.graceKeys.map(wrapper.makeGraceNote);
          var graceNoteGroup =  new VF.GraceNoteGroup(graceNotes, true);
          sn.addModifier(0, graceNoteGroup.beamNotes());
        }
        return sn;
      },

      makeGraceNote: function (graceKey) {
        var note = { keys: [graceKey], duration: '8' };
        return new Vex.Flow.GraceNote( note);
      },

      // make a tuplet layout
      makeTupletLayout: function (notes) {
        return function (vexTuplet) {
          return new Vex.Flow.Tuplet(notes.slice(vexTuplet.startPos, vexTuplet.endPos), {
             num_notes: vexTuplet.p, notes_occupied: vexTuplet.q
           });
        };
      },

      // tie a note to its successor
      makeTie: function (notes) {
        return function (noteIndex) {
          return new VF.StaveTie({
            first_note: notes[noteIndex],
            last_note: notes[noteIndex + 1],
            first_indices: [0],
            last_indices: [0]
          });
        };
      },

      // auto-beaming based on the time signature
      beamGroup: function (timeSignature, beatsPerBeam) {
        return {groups: [new Vex.Flow.Fraction(beatsPerBeam, timeSignature.denominator)] };
      },


      // add the accidental(s) to the staveNote(s)
      addAccidentals: function (staveNote, accidentals) {
        accidentals.forEach (function (accidentalString, index) {
          if (accidentalString) {
            staveNote.addAccidental(index, new VF.Accidental(accidentalString));
          }
        });
      },

      // add the accidental(s) to the staveNote(s)
      // not sure yet how to represent double-dots
      addDots: function (staveNote, dots) {
        dots.forEach (function (dotCount, index) {
          if (dotCount == 2) {
            staveNote.addDot(index).addDot(index);
          }
          else if (dotCount == 1) {
            staveNote.addDot(index);
          }
        });
      }


    }

  }();



  exports.initialiseCanvas = wrapper.initialiseCanvas;
  exports.newStaveImpl = wrapper.newStaveImpl;
  exports.displayStave = wrapper.displayStave;  
  exports.displayBarBeginRepeat = wrapper.displayBarBeginRepeat;
  exports.displayBarEndRepeat = wrapper.displayBarEndRepeat;  
  exports.displayAutoBeamedNotesImpl = wrapper.displayAutoBeamedNotesImpl;
  exports.displayTupletedNotesImpl = wrapper.displayTupletedNotesImpl;
  exports.displayVolta = wrapper.displayVolta;
  exports.timeSignatureImpl = wrapper.timeSignatureImpl;
  exports.keySignatureImpl = wrapper.keySignatureImpl;
})(PS["VexFlow.Score"] = PS["VexFlow.Score"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var staveWidth = function (bs) {
      var v = Data_Array.last(bs);
      if (v instanceof Data_Maybe.Just) {
          return v.value0.xOffset + v.value0.width | 0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return 0;
      };
      throw new Error("Failed pattern match at VexFlow.Abc.BarEnd line 100, column 3 - line 106, column 1: " + [ v.constructor.name ]);
  };
  var simpleBarType = {
      thickness: Data_Abc.Thin.value,
      repeat: Data_Maybe.Nothing.value,
      iteration: Data_Maybe.Nothing.value
  };
  var redundantBar = function (barSpec) {
      return VexFlow_Abc_Utils.isEmptyMusicSpec(barSpec.musicSpec) && barSpec.barNumber !== 0;
  };
  var shiftBarEnd = function (acc) {
      return function (barSpec) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
              var newVolta = (function () {
                  if (v) {
                      return VexFlow_Abc_Volta.completeVolta(barSpec.volta);
                  };
                  return barSpec.volta;
              })();
              var newBarSpec = {
                  endLineRepeat: v,
                  volta: newVolta,
                  barNumber: barSpec.barNumber,
                  beatsPerBeam: barSpec.beatsPerBeam,
                  hasEndLine: barSpec.hasEndLine,
                  musicSpec: barSpec.musicSpec,
                  startLine: barSpec.startLine,
                  timeSignature: barSpec.timeSignature,
                  width: barSpec.width,
                  xOffset: barSpec.xOffset
              };
              var currentEndBar = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barSpec.startLine.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barSpec.startLine.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value));
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(currentEndBar))(function (v1) {
                  var $10 = redundantBar(barSpec);
                  if ($10) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(acc);
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Array.cons(newBarSpec)(acc));
              });
          });
      };
  };
  var shiftBarEnds = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(shiftBarEnd)(Data_Monoid.mempty(Data_Monoid.monoidArray));
  var repositionBarEndRepeats = function (bs) {
      return Control_Monad_State.evalState(shiftBarEnds(Data_Array.reverse(bs)))(false);
  };
  var fillStaveLine = function (maxWidth) {
      return function (bs) {
          var v = Data_Array.last(bs);
          if (v instanceof Data_Maybe.Just) {
              var currentWidth = v.value0.xOffset + v.value0.width | 0;
              var $12 = currentWidth <= maxWidth;
              if ($12) {
                  var completionBar = {
                      barNumber: v.value0.barNumber + 1 | 0,
                      width: maxWidth - currentWidth | 0,
                      xOffset: currentWidth,
                      startLine: simpleBarType,
                      hasEndLine: false,
                      endLineRepeat: false,
                      volta: Data_Maybe.Nothing.value,
                      musicSpec: Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid),
                      beatsPerBeam: v.value0.beatsPerBeam,
                      timeSignature: v.value0.timeSignature
                  };
                  return Data_Array.snoc(bs)(completionBar);
              };
              return bs;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return bs;
          };
          throw new Error("Failed pattern match at VexFlow.Abc.BarEnd line 74, column 3 - line 95, column 9: " + [ v.constructor.name ]);
      };
  };
  exports["repositionBarEndRepeats"] = repositionBarEndRepeats;
  exports["fillStaveLine"] = fillStaveLine;
  exports["staveWidth"] = staveWidth;
})(PS["VexFlow.Abc.BarEnd"] = PS["VexFlow.Abc.BarEnd"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_BarEnd = PS["VexFlow.Abc.BarEnd"];
  var VexFlow_Types = PS["VexFlow.Types"];                 

  // | remove the empty stave bar extension that may occur at the end of a stave
  var removeStaveExtension = function (mss) {
      if (mss instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (mss instanceof Data_Maybe.Just) {
          var barSpecs = Data_Array.takeWhile(function (bs) {
              return bs.hasEndLine;
          })(mss.value0.barSpecs);
          return Data_Maybe.Just.create({
              barSpecs: barSpecs,
              isNewTimeSignature: mss.value0.isNewTimeSignature,
              keySignature: mss.value0.keySignature,
              staveNo: mss.value0.staveNo,
              staveWidth: mss.value0.staveWidth
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Alignment line 57, column 3 - line 65, column 42: " + [ mss.constructor.name ]);
  };

  // | the maximum stave width depends on the config
  var maxStaveWidth = function (config) {
      return Data_Int.floor(Data_Int.toNumber(config.canvasWidth) / config.scale);
  };

  // | find the increase required to grow each bar in a stave so that
  // | it reaches the required alignment width
  var incrementFactor = function (alignmentWidth) {
      return function (staveWidth) {
          var $9 = staveWidth >= alignmentWidth;
          if ($9) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Maybe.Just.create(Data_Int.toNumber(alignmentWidth - VexFlow_Types.staveIndentation | 0) / Data_Int.toNumber(staveWidth - VexFlow_Types.staveIndentation | 0));
      };
  };

  // | grow a stave bar to help make the stave fit the alignment width
  var growStaveBar = function (enlargement) {
      return function (barSpec) {
          var width = Data_Int.floor(Data_Int.toNumber(barSpec.width) * enlargement);
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(v + width | 0))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))({
                      xOffset: v,
                      width: width,
                      barNumber: barSpec.barNumber,
                      beatsPerBeam: barSpec.beatsPerBeam,
                      endLineRepeat: barSpec.endLineRepeat,
                      hasEndLine: barSpec.hasEndLine,
                      musicSpec: barSpec.musicSpec,
                      startLine: barSpec.startLine,
                      timeSignature: barSpec.timeSignature,
                      volta: barSpec.volta
                  });
              });
          });
      };
  };
  var growStaveSpecDefn = function (enlargement) {
      return function (ss) {
          var foldf = function (bs) {
              return function (b) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(growStaveBar(enlargement)(b))(function (v) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bs)(Data_Array.singleton(v)));
                  });
              };
          };
          return Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(foldf)(Data_Monoid.mempty(Data_Monoid.monoidArray))(ss.barSpecs);
      };
  };

  // | grow the stave spec to make the stave fit the alignment width
  var growStaveSpec = function (enlargement) {
      return function (staveSpec) {
          var barSpecs = Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(growStaveSpecDefn(enlargement)(staveSpec))(VexFlow_Types.staveIndentation));
          return {
              staveNo: staveSpec.staveNo,
              staveWidth: VexFlow_Abc_BarEnd.staveWidth(barSpecs),
              keySignature: staveSpec.keySignature,
              isNewTimeSignature: staveSpec.isNewTimeSignature,
              barSpecs: barSpecs
          };
      };
  };

  // | find the widest stave
  // | (if any stave is greater than the maximum width then this max is taken as the
  // | maximum)
  var alignmentStaveWidth = function (maxWidth) {
      return function (mss) {
          var staveWidthf = function (acc) {
              return function (mNext) {
                  if (mNext instanceof Data_Maybe.Nothing) {
                      return acc;
                  };
                  if (mNext instanceof Data_Maybe.Just) {
                      return Data_Ord.min(Data_Ord.ordInt)(maxWidth)(Data_Ord.max(Data_Ord.ordInt)(acc)(mNext.value0.staveWidth));
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Alignment line 75, column 7 - line 79, column 54: " + [ mNext.constructor.name ]);
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(staveWidthf)(0)(mss);
      };
  };

  // | where possible, align all staves so that they are aligned at the right-hand
  // | side of the score (as well, of course, as at the left).
  // |
  // | Don't attempt this for very narrow staves.
  // |
  // | If the widest stave is wider than the maximum stave width (and hence
  // | truncated) then align to this maximum width.
  var alignStaves = function (config) {
      return function (staves) {
          var newStaves = Data_Functor.map(Data_Functor.functorArray)(removeStaveExtension)(staves);
          var maxWidth = maxStaveWidth(config);
          var alignmentWidth = alignmentStaveWidth(maxWidth)(newStaves);
          var mapf = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  var maybeFactor = incrementFactor(alignmentWidth)(v.value0.staveWidth);
                  if (maybeFactor instanceof Data_Maybe.Just) {
                      return Data_Maybe.Just.create(growStaveSpec(maybeFactor.value0)(v.value0));
                  };
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          return Data_Functor.map(Data_Functor.functorArray)(mapf)(newStaves);
      };
  };
  exports["alignStaves"] = alignStaves;
})(PS["VexFlow.Abc.Alignment"] = PS["VexFlow.Abc.Alignment"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Canonical = PS["Data.Abc.Canonical"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var keySignature = function (ks) {
      var newks = (function () {
          if (ks.mode instanceof Data_Abc.Major) {
              return ks;
          };
          if (ks.mode instanceof Data_Abc.Minor) {
              return ks;
          };
          return Data_Abc_KeySignature.normaliseModalKey(ks);
      })();
      var modeStr = (function () {
          if (newks.mode instanceof Data_Abc.Minor) {
              return "m";
          };
          return "";
      })();
      return Data_Show.show(Data_Abc.showPitchClass)(newks.pitchClass) + (Data_Abc_Canonical.keySignatureAccidental(newks.accidental) + modeStr);
  };
  var headerChange = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              return [ new VexFlow_Abc_ContextChange.KeyChange(h.value0) ];
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return [ new VexFlow_Abc_ContextChange.UnitNoteChange(h.value0) ];
          };
          if (h instanceof Data_Abc.Meter) {
              if (h.value0 instanceof Data_Maybe.Just) {
                  return [ new VexFlow_Abc_ContextChange.MeterChange(h.value0.value0) ];
              };
              return [  ];
          };
          return [  ];
      };
  };
  var duration = function (ctx) {
      return function (d) {
          var v = VexFlow_Abc_Utils.noteTicks(ctx)(d);
          if (v === 128) {
              return new Data_Either.Right("w");
          };
          if (v === 112) {
              return new Data_Either.Right("hdd");
          };
          if (v === 96) {
              return new Data_Either.Right("hd");
          };
          if (v === 64) {
              return new Data_Either.Right("h");
          };
          if (v === 56) {
              return new Data_Either.Right("qdd");
          };
          if (v === 48) {
              return new Data_Either.Right("qd");
          };
          if (v === 32) {
              return new Data_Either.Right("q");
          };
          if (v === 28) {
              return new Data_Either.Right("8dd");
          };
          if (v === 24) {
              return new Data_Either.Right("8d");
          };
          if (v === 16) {
              return new Data_Either.Right("8");
          };
          if (v === 14) {
              return new Data_Either.Right("16dd");
          };
          if (v === 12) {
              return new Data_Either.Right("16d");
          };
          if (v === 8) {
              return new Data_Either.Right("16");
          };
          if (v === 7) {
              return new Data_Either.Right("32dd");
          };
          if (v === 6) {
              return new Data_Either.Right("32d");
          };
          if (v === 4) {
              return new Data_Either.Right("32");
          };
          if (v === 3) {
              return new Data_Either.Right("64d");
          };
          if (v === 2) {
              return new Data_Either.Right("64");
          };
          return new Data_Either.Left("too long or too dotted duration: " + (Data_Show.show(Data_Show.showInt)(Data_Ratio.numerator(d)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Ratio.denominator(d)))));
      };
  };
  var noteDur = function (ctx) {
      return function (abcNote) {
          return duration(ctx)(abcNote.duration);
      };
  };
  var chordalNoteDur = function (ctx) {
      return function (chordDur) {
          return function (abcNote) {
              return duration(ctx)(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(chordDur));
          };
      };
  };
  var buildMusicSpecFromNs = function (tCtx) {
      return function (ens) {
          return Data_Functor.map(Data_Either.functorEither)(function (ns) {
              return {
                  noteSpecs: ns,
                  tuplets: [  ],
                  ties: [  ],
                  tickableContext: tCtx,
                  contextChanges: [  ]
              };
          })(ens);
      };
  };
  var buildMusicSpecFromN = function (tCtx) {
      return function (noteIndex) {
          return function (isTied) {
              return function (ens) {
                  return Data_Functor.map(Data_Either.functorEither)(function (ns) {
                      return {
                          noteSpecs: [ ns ],
                          tuplets: [  ],
                          ties: (function () {
                              if (isTied) {
                                  return [ noteIndex ];
                              };
                              return [  ];
                          })(),
                          tickableContext: tCtx,
                          contextChanges: [  ]
                      };
                  })(ens);
              };
          };
      };
  };
  var buildMusicSpecFromContextChange = function (contextChange) {
      return Data_Either.Right.create({
          noteSpecs: [  ],
          tuplets: [  ],
          ties: [  ],
          tickableContext: Data_Monoid.mempty(VexFlow_Abc_TickableContext.tickableMonoidCtx),
          contextChanges: contextChange
      });
  };
  var accidental = function (v) {
      if (v instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (v instanceof Data_Abc.Flat) {
          return "b";
      };
      if (v instanceof Data_Abc.DoubleSharp) {
          return "##";
      };
      if (v instanceof Data_Abc.DoubleFlat) {
          return "bb";
      };
      if (v instanceof Data_Abc.Natural) {
          return "n";
      };
      if (v instanceof Data_Abc.Implicit) {
          return "";
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Translate line 39, column 1 - line 39, column 35: " + [ v.constructor.name ]);
  };
  var noteAccidental = function (abcNote) {
      return accidental(abcNote.accidental);
  };
  var pitch = function (pc) {
      return function (acc) {
          return function (oct) {
              return Data_String_Common.toLower(Data_Show.show(Data_Abc.showPitchClass)(pc)) + (accidental(acc) + ("/" + Data_Show.show(Data_Show.showInt)(oct)));
          };
      };
  };
  var notePitch = function (abcNote) {
      return pitch(abcNote.pitchClass)(abcNote.accidental)(abcNote.octave - 1 | 0);
  };
  var chord = function (context) {
      return function (abcChord) {
          var keys = Data_Functor.map(Data_Functor.functorArray)(notePitch)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var edur = chordalNoteDur(context)(abcChord.duration)(Data_List_NonEmpty.head(abcChord.notes));
          var dotCounts = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Utils.noteDotCount(context))(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var accidentals = Data_Functor.map(Data_Functor.functorArray)(noteAccidental)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          if (edur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: keys,
                  duration: edur.value0
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: accidentals,
                  dots: dotCounts,
                  graceKeys: [  ]
              });
          };
          if (edur instanceof Data_Either.Left) {
              return new Data_Either.Left(edur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 184, column 5 - line 198, column 23: " + [ edur.constructor.name ]);
      };
  };
  var note = function (context) {
      return function (abcNote) {
          var key = notePitch(abcNote);
          var edur = noteDur(context)(abcNote);
          if (edur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: [ key ],
                  duration: edur.value0
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: [ accidental(abcNote.accidental) ],
                  dots: [ VexFlow_Abc_Utils.noteDotCount(context)(abcNote) ],
                  graceKeys: context.pendingGraceKeys
              });
          };
          if (edur instanceof Data_Either.Left) {
              return new Data_Either.Left(edur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 126, column 5 - line 140, column 23: " + [ edur.constructor.name ]);
      };
  };
  var brokenRhythm = function (context) {
      return function (abcNote1) {
          return function (broken) {
              return function (abcNote2) {
                  var v = VexFlow_Abc_Utils.normaliseBroken(broken)(abcNote1)(abcNote2);
                  var enote2 = note(context)(v.value1);
                  var enote1 = note(context)(v.value0);
                  var v1 = new Data_Tuple.Tuple(enote1, enote2);
                  if (v1.value0 instanceof Data_Either.Right && v1.value1 instanceof Data_Either.Right) {
                      return new Data_Either.Right([ v1.value0.value0, v1.value1.value0 ]);
                  };
                  if (v1.value0 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value0.value0);
                  };
                  if (v1.value1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value1.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate line 210, column 5 - line 216, column 16: " + [ v1.constructor.name ]);
              };
          };
      };
  };
  var notes = function (context) {
      return function (abcNotes) {
          return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Functor.map(Data_Functor.functorArray)(note(context))(abcNotes));
      };
  };
  var rest = function (context) {
      return function (abcRest) {
          var key = pitch(Data_Abc.B.value)(Data_Abc.Implicit.value)(4);
          var edur = duration(context)(abcRest.duration);
          if (edur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: [ key ],
                  duration: edur.value0 + "r"
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: [  ],
                  dots: [ VexFlow_Abc_Utils.dotCount(context)(abcRest.duration) ],
                  graceKeys: [  ]
              });
          };
          if (edur instanceof Data_Either.Left) {
              return new Data_Either.Left(edur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 151, column 5 - line 165, column 23: " + [ edur.constructor.name ]);
      };
  };
  var restOrNote = function (context) {
      return function (rOrn) {
          if (rOrn instanceof Data_Either.Left) {
              return rest(context)(rOrn.value0);
          };
          if (rOrn instanceof Data_Either.Right) {
              return note(context)(rOrn.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 244, column 3 - line 248, column 27: " + [ rOrn.constructor.name ]);
      };
  };
  var tuplet = function (context) {
      return function (startOffset) {
          return function (signature) {
              return function (rns) {
                  var vexTuplet = {
                      p: signature.p,
                      q: signature.q,
                      startPos: startOffset,
                      endPos: startOffset + Data_Array.length(rns) | 0
                  };
                  var enoteSpecs = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Functor.map(Data_Functor.functorArray)(restOrNote(context))(rns));
                  if (enoteSpecs instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          vexTuplet: vexTuplet,
                          noteSpecs: enoteSpecs.value0
                      });
                  };
                  if (enoteSpecs instanceof Data_Either.Left) {
                      return new Data_Either.Left(enoteSpecs.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate line 232, column 5 - line 239, column 15: " + [ enoteSpecs.constructor.name ]);
              };
          };
      };
  };
  var music = function (context) {
      return function (tickablePosition) {
          return function (noteIndex) {
              return function (m) {
                  var tickableContext = VexFlow_Abc_TickableContext.getTickableContext(m);
                  if (m instanceof Data_Abc.Note) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(m.value0.tied)(note(context)(m.value0));
                  };
                  if (m instanceof Data_Abc.Rest) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(false)(rest(context)(m.value0));
                  };
                  if (m instanceof Data_Abc.Chord) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(false)(chord(context)(m.value0));
                  };
                  if (m instanceof Data_Abc.BrokenRhythmPair) {
                      return buildMusicSpecFromNs(tickableContext)(brokenRhythm(context)(m.value0)(m.value1)(m.value2));
                  };
                  if (m instanceof Data_Abc.Tuplet) {
                      var eRes = tuplet(context)(tickablePosition)(m.value0)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1));
                      return Data_Functor.map(Data_Either.functorEither)(function (tupletSpec) {
                          return {
                              noteSpecs: tupletSpec.noteSpecs,
                              tuplets: [ tupletSpec.vexTuplet ],
                              ties: [  ],
                              tickableContext: tickableContext,
                              contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray)
                          };
                      })(eRes);
                  };
                  if (m instanceof Data_Abc.Inline) {
                      return buildMusicSpecFromContextChange(headerChange(context)(m.value0));
                  };
                  return buildMusicSpecFromNs(tickableContext)(new Data_Either.Right([  ]));
              };
          };
      };
  };
  exports["keySignature"] = keySignature;
  exports["headerChange"] = headerChange;
  exports["notePitch"] = notePitch;
  exports["music"] = music;
})(PS["VexFlow.Abc.Translate"] = PS["VexFlow.Abc.Translate"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Metadata = PS["Data.Abc.Metadata"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_BarEnd = PS["VexFlow.Abc.BarEnd"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Translate = PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var zipBars = function (bs) {
      var intArray = Data_Array.range(0)(Data_List.length(bs));
      var barArray = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(bs);
      return Data_Array.zip(intArray)(barArray);
  };
  var music = function (tickablePosition) {
      return function (noteIndex) {
          return function (m) {
              if (m instanceof Data_Abc.GraceNote) {
                  var graceKeys = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Translate.notePitch)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1));
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                          var $20 = {};
                          for (var $21 in v) {
                              if ({}.hasOwnProperty.call(v, $21)) {
                                  $20[$21] = v[$21];
                              };
                          };
                          $20.pendingGraceKeys = graceKeys;
                          return $20;
                      })()))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
                      });
                  });
              };
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
                  var spec = VexFlow_Abc_Translate.music(v)(tickablePosition)(noteIndex)(m);
                  var newContext = VexFlow_Abc_Utils.applyContextChanges(v)(spec);
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))({
                      pendingGraceKeys: [  ],
                      accumulatedStaveWidth: newContext.accumulatedStaveWidth,
                      isMidVolta: newContext.isMidVolta,
                      isNewTimeSignature: newContext.isNewTimeSignature,
                      keySignature: newContext.keySignature,
                      maxWidth: newContext.maxWidth,
                      staveNo: newContext.staveNo,
                      timeSignature: newContext.timeSignature,
                      unitNoteLength: newContext.unitNoteLength
                  }))(function (v1) {
                      return Data_Either.either(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(spec);
                  });
              });
          };
      };
  };

  // | fold the music function over the array of music.
  // | the monoidal behaviour of TickableContext within MusicSpec
  // | accumulates this context by threading through the fold
  var foldMusicsFunction = function (eacc) {
      return function (m) {
          var noteIndex = Data_Array.length(eacc.noteSpecs);
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(music(eacc.tickableContext.value0)(noteIndex)(m))(function (v) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "contextChanges";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "noteSpecs";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tickableContext";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "ties";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tuplets";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(eacc)(v));
          });
      };
  };
  var foldOverMusics = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldMusicsFunction)(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
  var bar = function (staveNumber) {
      return function (barNumber) {
          return function (abcBar) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldOverMusics(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcBar.music)))(function (v) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v1) {
                      var isNewTimeSignature = v1.isNewTimeSignature || staveNumber === 0;
                      var isEmptyBar = VexFlow_Abc_Utils.isEmptyMusicSpec(v);
                    
                      // check if we're in the midst of a volta
  var newIsMidVolta = VexFlow_Abc_Volta.isMidVolta(abcBar.startLine)(isEmptyBar)(v1.isMidVolta);
                      var displayedKeySig = (function () {
                          var $33 = barNumber === 0;
                          if ($33) {
                              return new Data_Maybe.Just(v1.keySignature);
                          };
                          return Data_Maybe.Nothing.value;
                      })();
                      var width = VexFlow_Abc_TickableContext.estimateBarWidth(barNumber === 0)(isNewTimeSignature)(displayedKeySig)(abcBar);
                    
                      //  estimateBarWidth (barNumber == 0) (staveNumber == 0) displayedKeySig abcBar
  var barSpec = {
                          barNumber: barNumber,
                          width: width,
                          xOffset: v1.accumulatedStaveWidth,
                          startLine: abcBar.startLine,
                          hasEndLine: true,
                          endLineRepeat: false,
                          volta: VexFlow_Abc_Volta.startVolta(abcBar.startLine)(isEmptyBar)(v1.isMidVolta),
                          timeSignature: v1.timeSignature,
                          beatsPerBeam: VexFlow_Abc_Utils.beatsPerBeam(v1.timeSignature)(v),
                          musicSpec: v
                      };
                    
                      // accumulate the bar width
  var newWidth = v1.accumulatedStaveWidth + barSpec.width | 0;
                    
                      // set the new state.  We must reset isNewTimeSignature here which is only
                      // set after a BodyPart new time signature header
  var newAbcContext = (function () {
                          var $34 = {};
                          for (var $35 in v1) {
                              if ({}.hasOwnProperty.call(v1, $35)) {
                                  $34[$35] = v1[$35];
                              };
                          };
                          $34.accumulatedStaveWidth = newWidth;
                          $34.isMidVolta = newIsMidVolta;
                          $34.isNewTimeSignature = false;
                          return $34;
                      })();
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function (v2) {
                          return Control_Monad_Except_Trans.withExceptT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function (err) {
                              return err + (": bar " + Data_Show.show(Data_Show.showInt)(barNumber));
                          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(barSpec));
                      });
                  });
              });
          };
      };
  };
  var bars = function (staveNumber) {
      return function (bs) {
          var tupleArray = zipBars(bs);
          return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(function (v) {
              return bar(staveNumber)(v.value0)(v.value1);
          })(tupleArray);
      };
  };
  var bodyPart = function (bp) {
      if (bp instanceof Data_Abc.Score) {
          var $41 = Data_Abc_Metadata.isEmptyStave(bp.value0);
          if ($41) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
              var mStaveNo = VexFlow_Abc_Utils.nextStaveNo(v.staveNo);
              var staveNo = Data_Maybe.fromMaybe(0)(mStaveNo);
            
              // work out if we need a new time signature displayed on this stave
  var isNewTimeSignature = staveNo === 0 || v.isNewTimeSignature;
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                  var $43 = {};
                  for (var $44 in v) {
                      if ({}.hasOwnProperty.call(v, $44)) {
                          $43[$44] = v[$44];
                      };
                  };
                  $43.staveNo = mStaveNo;
                  $43.accumulatedStaveWidth = VexFlow_Types.staveIndentation;
                  return $43;
              })()))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bars(staveNo)(bp.value0))(function (v2) {
                    
                      /**
                     * }
                     *           -- find the overall width
                     *           accumulatedStaveWidth = staveWidth staveBars
                     *           -- fill the stave to the end with an empty staveline
                     *           filledStaveLine = fillStaveLine abcContext.maxWidth $ repositionBarEndRepeats staveBars
                     *           
                     */  
                      var normalisedStaveBars = VexFlow_Abc_BarEnd.repositionBarEndRepeats(v2);
                      var filledStaveLine = VexFlow_Abc_BarEnd.fillStaveLine(v.maxWidth)(normalisedStaveBars);
                      var accumulatedStaveWidth = VexFlow_Abc_BarEnd.staveWidth(normalisedStaveBars);
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new Data_Maybe.Just({
                          staveNo: staveNo,
                          staveWidth: accumulatedStaveWidth,
                          keySignature: v.keySignature,
                          isNewTimeSignature: isNewTimeSignature,
                          barSpecs: filledStaveLine
                      }));
                  });
              });
          });
      };
      if (bp instanceof Data_Abc.BodyInfo) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
              var contextChanges = VexFlow_Abc_Translate.headerChange(v)(bp.value0);
              var newAbcContext = Data_Foldable.foldl(Data_Foldable.foldableArray)(VexFlow_Abc_Utils.updateAbcContext)(v)(contextChanges);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
              });
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.TranslateStateful line 65, column 3 - line 109, column 21: " + [ bp.constructor.name ]);
  };
  var tuneBody = function (bodyParts) {
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bodyPart)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(bodyParts));
  };
  var runTuneBody = function (abcContext) {
      return function (bps) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(Control_Monad_Except_Trans.runExceptT(tuneBody(bps)))(abcContext));
      };
  };
  exports["runTuneBody"] = runTuneBody;
})(PS["VexFlow.Abc.TranslateStateful"] = PS["VexFlow.Abc.TranslateStateful"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["VexFlow.Score"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Alignment = PS["VexFlow.Abc.Alignment"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_Translate = PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_TranslateStateful = PS["VexFlow.Abc.TranslateStateful"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var staveSeparation = 100;
  var staveConfig = function (staveNo) {
      return function (barSpec) {
          return {
              x: barSpec.xOffset,
              y: staveSeparation * staveNo | 0,
              width: barSpec.width,
              barNo: barSpec.barNumber,
              hasEndLine: barSpec.hasEndLine
          };
      };
  };
  var processVolta = function (staveBar) {
      return function (mVolta) {
          if (mVolta instanceof Data_Maybe.Just) {
              return $foreign.displayVolta(staveBar)(mVolta.value0);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarEndRepeat = function (staveBar) {
      return function (isRepeat) {
          if (isRepeat) {
              return $foreign.displayBarEndRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarBeginRepeat = function (staveBar) {
      return function (mRepeat) {
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.Begin) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.End) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.BeginAndEnd) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var newStave = function (staveCnfg) {
      return function (ks) {
          return $foreign.newStaveImpl(staveCnfg)(VexFlow_Abc_Translate.keySignature(ks));
      };
  };
  var createScore = function (config) {
      return function (abcTune) {
          var abcContext = VexFlow_Abc_Utils.initialAbcContext(abcTune)(config);
          return VexFlow_Abc_TranslateStateful.runTuneBody(abcContext)(abcTune.body);
      };
  };
  var addTimeSignature = function (stave) {
      return function (timeSignature) {
          return $foreign.timeSignatureImpl(stave)(timeSignature);
      };
  };
  var addKeySignature = function (stave) {
      return function (ks) {
          return $foreign.keySignatureImpl(stave)(VexFlow_Abc_Translate.keySignature(ks));
      };
  };
  var displayContextChange = function (staveBar) {
      return function (contextChange) {
          if (contextChange instanceof VexFlow_Abc_ContextChange.MeterChange) {
              return addTimeSignature(staveBar)({
                  numerator: contextChange.value0.value0,
                  denominator: contextChange.value0.value1
              });
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return addKeySignature(staveBar)(contextChange.value0.keySignature);
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at VexFlow.Score line 189, column 3 - line 197, column 16: " + [ contextChange.constructor.name ]);
      };
  };
  var displayBarSpec = function (staveSpec) {
      return function (barSpec) {
          return function __do() {
              var v = newStave(staveConfig(staveSpec.staveNo)(barSpec))(staveSpec.keySignature)();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayContextChange(v))(barSpec.musicSpec.contextChanges)();
              (function () {
                  var $22 = barSpec.barNumber === 0 && staveSpec.isNewTimeSignature;
                  if ($22) {
                      return addTimeSignature(v)(barSpec.timeSignature)();
                  };
                  return Data_Unit.unit;
              })();
              var v1 = processBarBeginRepeat(v)(barSpec.startLine.repeat)();
              var v2 = processBarEndRepeat(v)(barSpec.endLineRepeat)();
              var v3 = processVolta(v)(barSpec.volta)();
              (function () {
                  var $23 = Data_Array["null"](barSpec.musicSpec.tuplets);
                  if ($23) {
                      return $foreign.displayAutoBeamedNotesImpl(v)(barSpec.timeSignature)(barSpec.beatsPerBeam)(barSpec.musicSpec)();
                  };
                  return $foreign.displayTupletedNotesImpl(v)(barSpec.timeSignature)(barSpec.beatsPerBeam)(barSpec.musicSpec)();
              })();
              return $foreign.displayStave(v)();
          };
      };
  };
  var displayStaveSpec = function (mStaveSpec) {
      if (mStaveSpec instanceof Data_Maybe.Just) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayBarSpec(mStaveSpec.value0))(mStaveSpec.value0.barSpecs);
      };
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  };
  var renderScore = function (config) {
      return function (rightAlign) {
          return function (eStaveSpecs) {
              if (eStaveSpecs instanceof Data_Either.Right) {
                  var alignedScore = (function () {
                      if (rightAlign) {
                          return VexFlow_Abc_Alignment.alignStaves(config)(eStaveSpecs.value0);
                      };
                      return eStaveSpecs.value0;
                  })();
                  return function __do() {
                      var v = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayStaveSpec)(alignedScore)();
                      return true;
                  };
              };
              if (eStaveSpecs instanceof Data_Either.Left) {
                  return function __do() {
                      var v = Effect_Console.log("error in translating tune  " + eStaveSpecs.value0)();
                      return false;
                  };
              };
              throw new Error("Failed pattern match at VexFlow.Score line 79, column 3 - line 91, column 17: " + [ eStaveSpecs.constructor.name ]);
          };
      };
  };
  exports["addTimeSignature"] = addTimeSignature;
  exports["createScore"] = createScore;
  exports["renderScore"] = renderScore;
  exports["newStave"] = newStave;
  exports["initialiseCanvas"] = $foreign.initialiseCanvas;
})(PS["VexFlow.Score"] = PS["VexFlow.Score"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Parser = PS["Data.Abc.Parser"];
  var Data_Either = PS["Data.Either"];
  var Effect = PS["Effect"];
  var Examples_StaveAlignment_Texts = PS["Examples.StaveAlignment.Texts"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Score = PS["VexFlow.Score"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var canvasWidth = 1500;
  var configure = function (tune) {
      return {
          canvasDivId: "canvas",
          canvasWidth: canvasWidth,
          canvasHeight: VexFlow_Abc_Utils.canvasHeight(tune),
          scale: 0.8
      };
  };
  var main = (function () {
      var eAbcTune = Data_Abc_Parser.parse(Examples_StaveAlignment_Texts.blomgren);
      if (eAbcTune instanceof Data_Either.Right) {
          var config = configure(eAbcTune.value0);
          var score = VexFlow_Score.createScore(config)(eAbcTune.value0);
          return function __do() {
              var v = VexFlow_Score.initialiseCanvas(config)();
              return VexFlow_Score.renderScore(config)(true)(score)();
          };
      };
      return Control_Applicative.pure(Effect.applicativeEffect)(false);
  })();
  exports["canvasWidth"] = canvasWidth;
  exports["configure"] = configure;
  exports["main"] = main;
})(PS["Examples.StaveAlignment.Main"] = PS["Examples.StaveAlignment.Main"] || {});
PS["Examples.StaveAlignment.Main"].main();