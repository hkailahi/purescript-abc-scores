// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  };
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };                                                         
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["SemigroupRecord"] = SemigroupRecord;
  exports["appendRecord"] = appendRecord;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($43) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                         
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 217, column 1 - line 217, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 268, column 1 - line 268, column 46: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldl(dictFoldable)(function (ma) {
                      return function (b) {
                          return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["all"] = all;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 42, column 3 - line 42, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($163) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List.uncons(xs));
          })(toList($163));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var head = function (v) {
      return v.value0;
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["toList"] = toList;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["fromNumber"] = fromNumber;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var semiringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value0))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, new Ratio(Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())), new Ratio(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())));
      };
  };
  var ringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Ring.Ring(function () {
              return semiringRatio(dictOrd)(dictEuclideanRing);
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          });
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var denominator = function (v) {
      return v.value1;
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
})(PS["Data.Ratio"] = PS["Data.Ratio"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Prelude = PS["Prelude"];                 
  var toNumber = function (x) {
      return Data_Int.toNumber(Data_Ratio.numerator(x)) / Data_Int.toNumber(Data_Ratio.denominator(x));
  };
  var fromInt = function (i) {
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(i)(1);
  };
  exports["toNumber"] = toNumber;
  exports["fromInt"] = fromInt;
})(PS["Data.Rational"] = PS["Data.Rational"] || {});
(function(exports) {
    "use strict";

  exports.toLower = function (s) {
    return s.toLowerCase();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["toLower"] = $foreign.toLower;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Thin = (function () {
      function Thin() {

      };
      Thin.value = new Thin();
      return Thin;
  })();
  var ThinThin = (function () {
      function ThinThin() {

      };
      ThinThin.value = new ThinThin();
      return ThinThin;
  })();
  var ThinThick = (function () {
      function ThinThick() {

      };
      ThinThick.value = new ThinThick();
      return ThinThick;
  })();
  var ThickThin = (function () {
      function ThickThin() {

      };
      ThickThin.value = new ThickThin();
      return ThickThin;
  })();
  var Invisible = (function () {
      function Invisible() {

      };
      Invisible.value = new Invisible();
      return Invisible;
  })();
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var BeginAndEnd = (function () {
      function BeginAndEnd() {

      };
      BeginAndEnd.value = new BeginAndEnd();
      return BeginAndEnd;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Ionian = (function () {
      function Ionian() {

      };
      Ionian.value = new Ionian();
      return Ionian;
  })();
  var Dorian = (function () {
      function Dorian() {

      };
      Dorian.value = new Dorian();
      return Dorian;
  })();
  var Phrygian = (function () {
      function Phrygian() {

      };
      Phrygian.value = new Phrygian();
      return Phrygian;
  })();
  var Lydian = (function () {
      function Lydian() {

      };
      Lydian.value = new Lydian();
      return Lydian;
  })();
  var Mixolydian = (function () {
      function Mixolydian() {

      };
      Mixolydian.value = new Mixolydian();
      return Mixolydian;
  })();
  var Aeolian = (function () {
      function Aeolian() {

      };
      Aeolian.value = new Aeolian();
      return Aeolian;
  })();
  var Locrian = (function () {
      function Locrian() {

      };
      Locrian.value = new Locrian();
      return Locrian;
  })();
  var LeftArrow = (function () {
      function LeftArrow(value0) {
          this.value0 = value0;
      };
      LeftArrow.create = function (value0) {
          return new LeftArrow(value0);
      };
      return LeftArrow;
  })();
  var RightArrow = (function () {
      function RightArrow(value0) {
          this.value0 = value0;
      };
      RightArrow.create = function (value0) {
          return new RightArrow(value0);
      };
      return RightArrow;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var DoubleSharp = (function () {
      function DoubleSharp() {

      };
      DoubleSharp.value = new DoubleSharp();
      return DoubleSharp;
  })();
  var DoubleFlat = (function () {
      function DoubleFlat() {

      };
      DoubleFlat.value = new DoubleFlat();
      return DoubleFlat;
  })();
  var Natural = (function () {
      function Natural() {

      };
      Natural.value = new Natural();
      return Natural;
  })();
  var Implicit = (function () {
      function Implicit() {

      };
      Implicit.value = new Implicit();
      return Implicit;
  })();
  var Pitch = (function () {
      function Pitch(value0) {
          this.value0 = value0;
      };
      Pitch.create = function (value0) {
          return new Pitch(value0);
      };
      return Pitch;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var UnitNoteLength = (function () {
      function UnitNoteLength(value0) {
          this.value0 = value0;
      };
      UnitNoteLength.create = function (value0) {
          return new UnitNoteLength(value0);
      };
      return UnitNoteLength;
  })();
  var Meter = (function () {
      function Meter(value0) {
          this.value0 = value0;
      };
      Meter.create = function (value0) {
          return new Meter(value0);
      };
      return Meter;
  })();
  var Note = (function () {
      function Note(value0) {
          this.value0 = value0;
      };
      Note.create = function (value0) {
          return new Note(value0);
      };
      return Note;
  })();
  var BrokenRhythmPair = (function () {
      function BrokenRhythmPair(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BrokenRhythmPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BrokenRhythmPair(value0, value1, value2);
              };
          };
      };
      return BrokenRhythmPair;
  })();
  var Rest = (function () {
      function Rest(value0) {
          this.value0 = value0;
      };
      Rest.create = function (value0) {
          return new Rest(value0);
      };
      return Rest;
  })();
  var Tuplet = (function () {
      function Tuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuplet.create = function (value0) {
          return function (value1) {
              return new Tuplet(value0, value1);
          };
      };
      return Tuplet;
  })();
  var GraceNote = (function () {
      function GraceNote(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GraceNote.create = function (value0) {
          return function (value1) {
              return new GraceNote(value0, value1);
          };
      };
      return GraceNote;
  })();
  var Chord = (function () {
      function Chord(value0) {
          this.value0 = value0;
      };
      Chord.create = function (value0) {
          return new Chord(value0);
      };
      return Chord;
  })();
  var Inline = (function () {
      function Inline(value0) {
          this.value0 = value0;
      };
      Inline.create = function (value0) {
          return new Inline(value0);
      };
      return Inline;
  })();
  var Spacer = (function () {
      function Spacer(value0) {
          this.value0 = value0;
      };
      Spacer.create = function (value0) {
          return new Spacer(value0);
      };
      return Spacer;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var Continuation = (function () {
      function Continuation(value0) {
          this.value0 = value0;
      };
      Continuation.create = function (value0) {
          return new Continuation(value0);
      };
      return Continuation;
  })();
  var Score = (function () {
      function Score(value0) {
          this.value0 = value0;
      };
      Score.create = function (value0) {
          return new Score(value0);
      };
      return Score;
  })();
  var BodyInfo = (function () {
      function BodyInfo(value0) {
          this.value0 = value0;
      };
      BodyInfo.create = function (value0) {
          return new BodyInfo(value0);
      };
      return BodyInfo;
  })();
  var showPitchClass = new Data_Show.Show(function (v) {
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof B) {
          return "B";
      };
      if (v instanceof C) {
          return "C";
      };
      if (v instanceof D) {
          return "D";
      };
      if (v instanceof E) {
          return "E";
      };
      if (v instanceof F) {
          return "F";
      };
      if (v instanceof G) {
          return "G";
      };
      throw new Error("Failed pattern match at Data.Abc line 235, column 1 - line 235, column 43: " + [ v.constructor.name ]);
  });
  var eqThickness = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Thin && y instanceof Thin) {
              return true;
          };
          if (x instanceof ThinThin && y instanceof ThinThin) {
              return true;
          };
          if (x instanceof ThinThick && y instanceof ThinThick) {
              return true;
          };
          if (x instanceof ThickThin && y instanceof ThickThin) {
              return true;
          };
          if (x instanceof Invisible && y instanceof Invisible) {
              return true;
          };
          return false;
      };
  });
  var eqRepeat = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Begin && y instanceof Begin) {
              return true;
          };
          if (x instanceof End && y instanceof End) {
              return true;
          };
          if (x instanceof BeginAndEnd && y instanceof BeginAndEnd) {
              return true;
          };
          return false;
      };
  });
  var eqPitchCLass = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return true;
          };
          if (x instanceof B && y instanceof B) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return true;
          };
          if (x instanceof D && y instanceof D) {
              return true;
          };
          if (x instanceof E && y instanceof E) {
              return true;
          };
          if (x instanceof F && y instanceof F) {
              return true;
          };
          if (x instanceof G && y instanceof G) {
              return true;
          };
          return false;
      };
  });
  var ordPitchCLass = new Data_Ord.Ord(function () {
      return eqPitchCLass;
  }, function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof A) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof A) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof B && y instanceof B) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof B) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof B) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof C && y instanceof C) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof C) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof C) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof D && y instanceof D) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof D) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof D) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof E && y instanceof E) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof E) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof E) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof F && y instanceof F) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof F) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof F) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof G && y instanceof G) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Abc line 245, column 8 - line 245, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Major && y instanceof Major) {
              return true;
          };
          if (x instanceof Minor && y instanceof Minor) {
              return true;
          };
          if (x instanceof Ionian && y instanceof Ionian) {
              return true;
          };
          if (x instanceof Dorian && y instanceof Dorian) {
              return true;
          };
          if (x instanceof Phrygian && y instanceof Phrygian) {
              return true;
          };
          if (x instanceof Lydian && y instanceof Lydian) {
              return true;
          };
          if (x instanceof Mixolydian && y instanceof Mixolydian) {
              return true;
          };
          if (x instanceof Aeolian && y instanceof Aeolian) {
              return true;
          };
          if (x instanceof Locrian && y instanceof Locrian) {
              return true;
          };
          return false;
      };
  });
  var eqAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return true;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return true;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return true;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return true;
          };
          if (x instanceof Implicit && y instanceof Implicit) {
              return true;
          };
          return false;
      };
  });
  var enumPitchClass = new Data_Enum.Enum(function () {
      return ordPitchCLass;
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(C.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(A.value);
      };
      throw new Error("Failed pattern match at Data.Abc line 247, column 1 - line 247, column 43: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(A.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(C.value);
      };
      throw new Error("Failed pattern match at Data.Abc line 247, column 1 - line 247, column 43: " + [ v.constructor.name ]);
  });
  exports["Score"] = Score;
  exports["BodyInfo"] = BodyInfo;
  exports["Key"] = Key;
  exports["UnitNoteLength"] = UnitNoteLength;
  exports["Meter"] = Meter;
  exports["Note"] = Note;
  exports["BrokenRhythmPair"] = BrokenRhythmPair;
  exports["Rest"] = Rest;
  exports["Tuplet"] = Tuplet;
  exports["GraceNote"] = GraceNote;
  exports["Chord"] = Chord;
  exports["Inline"] = Inline;
  exports["Spacer"] = Spacer;
  exports["Ignore"] = Ignore;
  exports["Continuation"] = Continuation;
  exports["Thin"] = Thin;
  exports["ThinThin"] = ThinThin;
  exports["ThinThick"] = ThinThick;
  exports["ThickThin"] = ThickThin;
  exports["Invisible"] = Invisible;
  exports["Begin"] = Begin;
  exports["End"] = End;
  exports["BeginAndEnd"] = BeginAndEnd;
  exports["Pitch"] = Pitch;
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Ionian"] = Ionian;
  exports["Dorian"] = Dorian;
  exports["Phrygian"] = Phrygian;
  exports["Lydian"] = Lydian;
  exports["Mixolydian"] = Mixolydian;
  exports["Aeolian"] = Aeolian;
  exports["Locrian"] = Locrian;
  exports["Sharp"] = Sharp;
  exports["Flat"] = Flat;
  exports["DoubleSharp"] = DoubleSharp;
  exports["DoubleFlat"] = DoubleFlat;
  exports["Natural"] = Natural;
  exports["Implicit"] = Implicit;
  exports["A"] = A;
  exports["B"] = B;
  exports["C"] = C;
  exports["D"] = D;
  exports["E"] = E;
  exports["F"] = F;
  exports["G"] = G;
  exports["LeftArrow"] = LeftArrow;
  exports["RightArrow"] = RightArrow;
  exports["eqThickness"] = eqThickness;
  exports["eqRepeat"] = eqRepeat;
  exports["eqMode"] = eqMode;
  exports["eqAccidental"] = eqAccidental;
  exports["showPitchClass"] = showPitchClass;
  exports["eqPitchCLass"] = eqPitchCLass;
  exports["ordPitchCLass"] = ordPitchCLass;
  exports["enumPitchClass"] = enumPitchClass;
})(PS["Data.Abc"] = PS["Data.Abc"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var keySignatureAccidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "b";
      };
      return "";
  };
  exports["keySignatureAccidental"] = keySignatureAccidental;
})(PS["Data.Abc.Canonical"] = PS["Data.Abc.Canonical"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 143, column 3 - line 145, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var White = (function () {
      function White(value0) {
          this.value0 = value0;
      };
      White.create = function (value0) {
          return new White(value0);
      };
      return White;
  })();
  var Black = (function () {
      function Black(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Black.create = function (value0) {
          return function (value1) {
              return new Black(value0, value1);
          };
      };
      return Black;
  })();
  var successor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.succ(Data_Abc.enumPitchClass)(pc));
  }; 
  var rotate = function (n) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.drop(n)(xs))(Data_Array.take(n)(xs));
      };
  };   
  var predecessor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.pred(Data_Abc.enumPitchClass)(pc));
  };                                                                        
  var pianoOctave = [ new White(Data_Abc.C.value), new Black(Data_Abc.C.value, Data_Abc.D.value), new White(Data_Abc.D.value), new Black(Data_Abc.D.value, Data_Abc.E.value), new White(Data_Abc.E.value), new White(Data_Abc.F.value), new Black(Data_Abc.F.value, Data_Abc.G.value), new White(Data_Abc.G.value), new Black(Data_Abc.G.value, Data_Abc.A.value), new White(Data_Abc.A.value), new Black(Data_Abc.A.value, Data_Abc.B.value), new White(Data_Abc.B.value) ];
  var pianoKeyToPitch = function (isFlatCtx) {
      return function (pianoKey) {
          var convertPianoKey = function (flatCtx) {
              return function (v) {
                  if (v instanceof White) {
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Natural.value
                      });
                  };
                  if (v instanceof Black) {
                      if (flatCtx) {
                          return new Data_Abc.Pitch({
                              pitchClass: v.value1,
                              accidental: Data_Abc.Flat.value
                          });
                      };
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Sharp.value
                      });
                  };
                  throw new Error("Failed pattern match at Data.Abc.KeySignature line 397, column 5 - line 397, column 52: " + [ flatCtx.constructor.name, v.constructor.name ]);
              };
          };
          return convertPianoKey(isFlatCtx)(pianoKey);
      };
  };
  var notesInChromaticScale = 12;
  var isFSharp = function (ks) {
      return Data_Eq.eq(Data_Abc.eqPitchCLass)(ks.pitchClass)(Data_Abc.F.value) && (Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Sharp.value) && (Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Major.value) || Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Ionian.value)));
  };
  var fSharpScale = new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Sharp.value
  }), Data_List_Types.Nil.value)))))));
  var fSharpKeySet = Data_List.filter(function (v) {
      return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Sharp.value);
  })(fSharpScale);
  var eqPianoKey = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof White && y instanceof White) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0);
          };
          if (x instanceof Black && y instanceof Black) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0) && Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var distanceFromMajor = function (mode) {
      if (mode instanceof Data_Abc.Dorian) {
          return 10;
      };
      if (mode instanceof Data_Abc.Phrygian) {
          return 8;
      };
      if (mode instanceof Data_Abc.Lydian) {
          return 7;
      };
      if (mode instanceof Data_Abc.Mixolydian) {
          return 5;
      };
      if (mode instanceof Data_Abc.Aeolian) {
          return 3;
      };
      if (mode instanceof Data_Abc.Minor) {
          return 3;
      };
      if (mode instanceof Data_Abc.Locrian) {
          return 1;
      };
      if (mode instanceof Data_Abc.Major) {
          return 0;
      };
      if (mode instanceof Data_Abc.Ionian) {
          return 0;
      };
      throw new Error("Failed pattern match at Data.Abc.KeySignature line 377, column 3 - line 388, column 1: " + [ mode.constructor.name ]);
  };
  var distanceFromC = function (keySig) {
      return Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqPianoKey)(keySig)(pianoOctave));
  };
  var diatonicScaleOffsets = [ 0, 2, 4, 5, 7, 9, 11 ];
  var pianoKeyScale = function (keySig) {
      return function (mode) {
          var shift = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(distanceFromC(keySig) + distanceFromMajor(mode) | 0)(notesInChromaticScale);
          var scale = rotate(shift)(pianoOctave);
          var tonic = Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.head(scale));
          var lookup = function (key) {
              return Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.index(scale)(key));
          };
          var keys = Data_Functor.map(Data_Functor.functorArray)(lookup)(diatonicScaleOffsets);
          return new Data_Tuple.Tuple(tonic, keys);
      };
  };
  var buildPianoKey = function (v) {
      if (v.value0.accidental instanceof Data_Abc.Flat) {
          return new Black(predecessor(v.value0.pitchClass), v.value0.pitchClass);
      };
      if (v.value0.accidental instanceof Data_Abc.Sharp) {
          return new Black(v.value0.pitchClass, successor(v.value0.pitchClass));
      };
      return new White(v.value0.pitchClass);
  };
  var normaliseModalKey = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = pianoKeyScale(pianoKeySignature)(ks.mode);
      var isFlatCtx = Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Flat.value);
      var v1 = pianoKeyToPitch(isFlatCtx)(v.value0);
      return {
          pitchClass: v1.value0.pitchClass,
          accidental: v1.value0.accidental,
          mode: Data_Abc.Major.value
      };
  };
  var blackKeySet = function (keySig) {
      return function (mode) {
          var v = pianoKeyScale(keySig)(mode);
          var isBlackKey = function (v1) {
              if (v1 instanceof White) {
                  return false;
              };
              if (v1 instanceof Black) {
                  return true;
              };
              throw new Error("Failed pattern match at Data.Abc.KeySignature line 340, column 5 - line 340, column 38: " + [ v1.constructor.name ]);
          };
          return Data_Tuple.Tuple.create(v.value0)(Data_Array.filter(isBlackKey)(v.value1));
      };
  };
  var keySet = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = blackKeySet(pianoKeySignature)(ks.mode);
      var isFlatCtx = (function () {
          if (v.value0 instanceof White && v.value0.value0 instanceof Data_Abc.F) {
              return true;
          };
          if (v.value0 instanceof White) {
              return false;
          };
          return true;
      })();
      var basicKeySet = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(pianoKeyToPitch(isFlatCtx))(v.value1));
      var $119 = isFSharp(ks);
      if ($119) {
          return fSharpKeySet;
      };
      if (v.value0 instanceof Black && (v.value0.value0 instanceof Data_Abc.F && v.value0.value1 instanceof Data_Abc.G)) {
          return new Data_List_Types.Cons(new Data_Abc.Pitch({
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Flat.value
          }), basicKeySet);
      };
      return basicKeySet;
  };
  exports["notesInChromaticScale"] = notesInChromaticScale;
  exports["keySet"] = keySet;
  exports["normaliseModalKey"] = normaliseModalKey;
})(PS["Data.Abc.KeySignature"] = PS["Data.Abc.KeySignature"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var isEmptyStave = function (bars) {
      var isEmptyBar = function (bar) {
          var f = function (music$prime) {
              if (music$prime instanceof Data_Abc.Spacer) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Ignore) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Continuation) {
                  return true;
              };
              return false;
          };
          return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(bar.music) || Data_List["null"](bar.music);
      };
      return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isEmptyBar)(bars);
  };
  var dotFactor = function (i) {
      if (i === 1) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
      };
      if (i === 2) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(4);
      };
      if (i === 3) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(7)(8);
      };
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(0)(1);
  };
  exports["dotFactor"] = dotFactor;
  exports["isEmptyStave"] = isEmptyStave;
})(PS["Data.Abc.Metadata"] = PS["Data.Abc.Metadata"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var gn = function (d) {
      return {
          pitchClass: Data_Abc.G.value,
          accidental: Data_Abc.Implicit.value,
          octave: 5,
          duration: Data_Rational.fromInt(d),
          tied: false
      };
  };
  var g = function (d) {
      return new Data_Abc.Note(gn(d));
  };
  var f = function (d) {
      return new Data_Abc.Note({
          pitchClass: Data_Abc.F.value,
          accidental: Data_Abc.Implicit.value,
          octave: 5,
          duration: Data_Rational.fromInt(d),
          tied: false
      });
  };
  var enat = function (d) {
      return new Data_Abc.Note({
          pitchClass: Data_Abc.E.value,
          accidental: Data_Abc.Natural.value,
          octave: 5,
          duration: Data_Rational.fromInt(d),
          tied: false
      });
  };                                                                   
  var cn = function (d) {
      return {
          pitchClass: Data_Abc.C.value,
          accidental: Data_Abc.Implicit.value,
          octave: 5,
          duration: Data_Rational.fromInt(d),
          tied: false
      };
  };
  var c = function (d) {
      return new Data_Abc.Note(cn(d));
  };
  exports["enat"] = enat;
  exports["c"] = c;
  exports["cn"] = cn;
  exports["f"] = f;
  exports["g"] = g;
  exports["gn"] = gn;
})(PS["Examples.Errors.Samples"] = PS["Examples.Errors.Samples"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];                 
  var MeterChange = (function () {
      function MeterChange(value0) {
          this.value0 = value0;
      };
      MeterChange.create = function (value0) {
          return new MeterChange(value0);
      };
      return MeterChange;
  })();
  var KeyChange = (function () {
      function KeyChange(value0) {
          this.value0 = value0;
      };
      KeyChange.create = function (value0) {
          return new KeyChange(value0);
      };
      return KeyChange;
  })();
  var UnitNoteChange = (function () {
      function UnitNoteChange(value0) {
          this.value0 = value0;
      };
      UnitNoteChange.create = function (value0) {
          return new UnitNoteChange(value0);
      };
      return UnitNoteChange;
  })();
  exports["MeterChange"] = MeterChange;
  exports["KeyChange"] = KeyChange;
  exports["UnitNoteChange"] = UnitNoteChange;
})(PS["VexFlow.Abc.ContextChange"] = PS["VexFlow.Abc.ContextChange"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var TickableContext = (function () {
      function TickableContext(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TickableContext.create = function (value0) {
          return function (value1) {
              return new TickableContext(value0, value1);
          };
      };
      return TickableContext;
  })();
  var tickableSemigroupCtx = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new TickableContext(v.value0 + v1.value0 | 0, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(v.value1)(v1.value1));
      };
  });
  var tickableMonoidCtx = new Data_Monoid.Monoid(function () {
      return tickableSemigroupCtx;
  }, new TickableContext(0, Data_Rational.fromInt(0)));
  var tickableCountWidth = function (n) {
      if (n === 1) {
          return 1.5;
      };
      if (n === 2) {
          return 2.5;
      };
      return Data_Int.toNumber(n);
  };
  var pixelsPerItem = 35.0;
  var keySignatureWidth = function (keySignature) {
      var v = Data_List.length(Data_Abc_KeySignature.keySet(keySignature));
      if (v === 0) {
          return 0.0;
      };
      if (v === 1) {
          return 1.0;
      };
      if (v === 2) {
          return 1.0;
      };
      return 1.5;
  };
  var getRorNsDuration = function (rOrNs) {
      var f = function (acc) {
          return function (rOrN) {
              if (rOrN instanceof Data_Either.Left) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.duration)(acc);
              };
              if (rOrN instanceof Data_Either.Right) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.duration)(acc);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.TickableContext line 69, column 7 - line 71, column 42: " + [ rOrN.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(Data_Rational.fromInt(0))(rOrNs);
  };
  var getTickableContext = function (m) {
      if (m instanceof Data_Abc.Note) {
          return new TickableContext(1, m.value0.duration);
      };
      if (m instanceof Data_Abc.Rest) {
          return new TickableContext(1, m.value0.duration);
      };
      if (m instanceof Data_Abc.Chord) {
          var abcNote = Data_List_NonEmpty.head(m.value0.notes);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(abcNote.duration);
          return new TickableContext(1, duration);
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          return new TickableContext(2, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(m.value2.duration));
      };
      if (m instanceof Data_Abc.Tuplet) {
          var reduction = Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(m.value0.q)(m.value0.p);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(reduction)(getRorNsDuration(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1)));
          return new TickableContext(m.value0.r, duration);
      };
      return Data_Monoid.mempty(tickableMonoidCtx);
  };
  var countGraceNoteGroups = function (ms) {
      var sumGrace = function (acc) {
          return function (m) {
              if (m instanceof Data_Abc.GraceNote) {
                  return acc + 1.0;
              };
              return acc;
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(sumGrace)(0.0)(ms);
  };
  var estimateBarWidth = function (hasClef) {
      return function (hasTimeSig) {
          return function (maybeKeySig) {
              return function (abcBar) {
                  var v = Data_Foldable.foldMap(Data_List_Types.foldableList)(tickableMonoidCtx)(getTickableContext)(abcBar.music);
                  var timeSigCount = (function () {
                      if (hasTimeSig) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  var keySigCount = Data_Maybe.maybe(0.0)(keySignatureWidth)(maybeKeySig);
                  var graceCount = countGraceNoteGroups(abcBar.music);
                  var clefCount = (function () {
                      if (hasClef) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  return Data_Int.round((clefCount + timeSigCount + keySigCount + tickableCountWidth(v.value0) + 0.5 * graceCount) * pixelsPerItem);
              };
          };
      };
  };
  exports["pixelsPerItem"] = pixelsPerItem;
  exports["TickableContext"] = TickableContext;
  exports["getTickableContext"] = getTickableContext;
  exports["getRorNsDuration"] = getRorNsDuration;
  exports["estimateBarWidth"] = estimateBarWidth;
  exports["keySignatureWidth"] = keySignatureWidth;
  exports["tickableCountWidth"] = tickableCountWidth;
  exports["countGraceNoteGroups"] = countGraceNoteGroups;
  exports["tickableSemigroupCtx"] = tickableSemigroupCtx;
  exports["tickableMonoidCtx"] = tickableMonoidCtx;
})(PS["VexFlow.Abc.TickableContext"] = PS["VexFlow.Abc.TickableContext"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var isEndVolta = function (barType) {
      return function (isEmptyBar) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.Begin.value)) || (Data_Eq.eq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.ThinThick.value) || (Data_Eq.eq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.ThickThin.value) || isEmptyBar))));
      };
  };
  var isMidVolta = function (barType) {
      return function (isEmptyBar) {
          return function (current) {
              var $1 = Data_Maybe.isJust(barType.iteration);
              if ($1) {
                  return true;
              };
              var $2 = isEndVolta(barType)(isEmptyBar);
              if ($2) {
                  return false;
              };
              return current;
          };
      };
  };
  var startVolta = function (barType) {
      return function (isEmptyBar) {
          return function (isCurrentlyMidVolta) {
              if (barType.iteration instanceof Data_Maybe.Nothing) {
                  if (isCurrentlyMidVolta) {
                      var $5 = isEndVolta(barType)(isEmptyBar);
                      if ($5) {
                          return Data_Maybe.Nothing.value;
                      };
                      return new Data_Maybe.Just({
                          voltaType: 3,
                          iteration: ""
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (barType.iteration instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just({
                      voltaType: 2,
                      iteration: Data_Show.show(Data_Show.showInt)(barType.iteration.value0)
                  });
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Volta line 42, column 3 - line 56, column 13: " + [ barType.iteration.constructor.name ]);
          };
      };
  };
  var completeVolta = function (mvolta) {
      if (mvolta instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (mvolta instanceof Data_Maybe.Just) {
          var newVoltaType = (function () {
              if (mvolta.value0.voltaType === 2) {
                  return 5;
              };
              if (mvolta.value0.voltaType === 3) {
                  return 4;
              };
              return mvolta.value0.voltaType;
          })();
          return Data_Maybe.Just.create({
              voltaType: newVoltaType,
              iteration: mvolta.value0.iteration
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Volta line 63, column 3 - line 78, column 48: " + [ mvolta.constructor.name ]);
  };
  exports["startVolta"] = startVolta;
  exports["completeVolta"] = completeVolta;
  exports["isMidVolta"] = isMidVolta;
})(PS["VexFlow.Abc.Volta"] = PS["VexFlow.Abc.Volta"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var staveIndentation = 10;
  var musicSpecSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "contextChanges";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "noteSpecs";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tickableContext";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "ties";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tuplets";
          }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(v)(v1);
      };
  });
  var musicSpecMonoid = new Data_Monoid.Monoid(function () {
      return musicSpecSemigroup;
  }, {
      noteSpecs: [  ],
      tuplets: [  ],
      ties: [  ],
      tickableContext: Data_Monoid.mempty(VexFlow_Abc_TickableContext.tickableMonoidCtx),
      contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray)
  });
  exports["staveIndentation"] = staveIndentation;
  exports["musicSpecSemigroup"] = musicSpecSemigroup;
  exports["musicSpecMonoid"] = musicSpecMonoid;
})(PS["VexFlow.Types"] = PS["VexFlow.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Metadata = PS["Data.Abc.Metadata"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var updateAbcContext = function (abcContext) {
      return function (change) {
          if (change instanceof VexFlow_Abc_ContextChange.MeterChange) {
              var timeSignature = {
                  numerator: change.value0.value0,
                  denominator: change.value0.value1
              };
              return {
                  timeSignature: timeSignature,
                  keySignature: abcContext.keySignature,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: true,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: change.value0.keySignature,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: abcContext.keySignature,
                  unitNoteLength: change.value0,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingGraceKeys: abcContext.pendingGraceKeys,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin
              };
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Utils line 126, column 3 - line 142, column 19: " + [ change.constructor.name ]);
      };
  };
  var noteTicks = function (ctx) {
      return function (d) {
          return Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(ctx.unitNoteLength)(d))(Data_Rational.fromInt(128))));
      };
  };
  var normaliseBroken = function (broken) {
      return function (n1) {
          return function (n2) {
              var up = function (i) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              var down = function (i) {
                  return Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              if (broken instanceof Data_Abc.LeftArrow) {
                  var right = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(up(broken.value0)),
                      accidental: n2.accidental,
                      octave: n2.octave,
                      pitchClass: n2.pitchClass,
                      tied: n2.tied
                  };
                  var left = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(down(broken.value0)),
                      accidental: n1.accidental,
                      octave: n1.octave,
                      pitchClass: n1.pitchClass,
                      tied: n1.tied
                  };
                  return new Data_Tuple.Tuple(left, right);
              };
              if (broken instanceof Data_Abc.RightArrow) {
                  var right = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(down(broken.value0)),
                      accidental: n2.accidental,
                      octave: n2.octave,
                      pitchClass: n2.pitchClass,
                      tied: n2.tied
                  };
                  var left = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(up(broken.value0)),
                      accidental: n1.accidental,
                      octave: n1.octave,
                      pitchClass: n1.pitchClass,
                      tied: n1.tied
                  };
                  return new Data_Tuple.Tuple(left, right);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Utils line 78, column 5 - line 97, column 30: " + [ broken.constructor.name ]);
          };
      };
  };
  var nextStaveNo = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(0);
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(v.value0 + 1 | 0);
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Utils line 153, column 1 - line 153, column 38: " + [ v.constructor.name ]);
  };
  var isEmptyMusicSpec = function (v) {
      return Data_Array["null"](v.noteSpecs);
  };
  var dotCount = function (ctx) {
      return function (d) {
          var v = noteTicks(ctx)(d);
          if (v === 112) {
              return 2;
          };
          if (v === 96) {
              return 1;
          };
          if (v === 56) {
              return 2;
          };
          if (v === 48) {
              return 1;
          };
          if (v === 28) {
              return 2;
          };
          if (v === 24) {
              return 1;
          };
          if (v === 14) {
              return 2;
          };
          if (v === 12) {
              return 1;
          };
          if (v === 7) {
              return 2;
          };
          if (v === 6) {
              return 1;
          };
          if (v === 3) {
              return 1;
          };
          return 0;
      };
  };
  var noteDotCount = function (ctx) {
      return function (abcNote) {
          return dotCount(ctx)(abcNote.duration);
      };
  };
  var cMajor = {
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Natural.value,
      mode: Data_Abc.Major.value
  };
  var applyContextChanges = function (abcContext) {
      return function (eSpec) {
          if (eSpec instanceof Data_Either.Right) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(updateAbcContext)(abcContext)(eSpec.value0.contextChanges);
          };
          return abcContext;
      };
  };
  exports["applyContextChanges"] = applyContextChanges;
  exports["dotCount"] = dotCount;
  exports["normaliseBroken"] = normaliseBroken;
  exports["noteDotCount"] = noteDotCount;
  exports["noteTicks"] = noteTicks;
  exports["updateAbcContext"] = updateAbcContext;
  exports["nextStaveNo"] = nextStaveNo;
  exports["isEmptyMusicSpec"] = isEmptyMusicSpec;
  exports["cMajor"] = cMajor;
})(PS["VexFlow.Abc.Utils"] = PS["VexFlow.Abc.Utils"] || {});
(function(exports) {
    "use strict";

  var wrapper = function() {

    var VF = null;
    var renderer = null;
    var context = null;

    return {

      initialiseCanvas : function (config) {
        return function () {
          return wrapper.init(config);
        }
      },

      clearCanvas : function () {
        context.clear();
      },

      newStaveImpl : function (staveConfig) {
        return function (keySignature) {
          return function () {
            return wrapper.makeStave(staveConfig, keySignature);
          }
        }
      },

      displayBarBeginRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
        }
      },

      displayBarEndRepeat : function (stave) {
        return function () {
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayBarBothRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayVolta : function (stave) {
        return function (volta) {
          return function () {
            return wrapper.drawVolta(stave, volta);
          }
        }
      },

      displayStave : function (stave) {
        return function () {
          return wrapper.drawStave(stave);
        }
      },

      getStaveWidth : function (stave) {
        return function () {
          return stave.getWidth();
        }
      },

      timeSignatureImpl : function (stave) {
        return function (timeSignature) {
          return function () {
            return wrapper.drawTimeSignature(stave, timeSignature);
          }
        }
      },

      keySignatureImpl : function (stave) {
        return function (keySignature) {
          return function () {
            return wrapper.drawKeySignature(stave, keySignature, false);
          }
        }
      },

      /*
    displayNotesImpl : function (stave) {
      return function (notes) {
        return function () {
          return wrapper.drawNotes(stave, notes);
        }
      }
    },
    */  

      displayAutoBeamedNotesImpl : function (stave) {
        return function (beamGroups) {
          return function (musicSpec) {
            return function () {
              return wrapper.drawAutoBeamedNotes(stave, beamGroups, musicSpec);
            }
          }
        }
      },

      displayTupletedNotesImpl : function (stave) {
        return function (beamGroups) {
          return function (musicSpec) {
            return function () {
             return wrapper.drawTupletedNotes(stave, beamGroups, musicSpec);
            }
          }
        }
      },

      init: function (config) {
        // console.log(config);

        VF = Vex.Flow;
        renderer = new VF.Renderer(config.canvasDivId , VF.Renderer.Backends.SVG);
        // renderer = new VF.Renderer(config.canvasDivId, VF.Renderer.Backends.CANVAS);

        // Size our svg:
        renderer.resize(config.canvasWidth, config.canvasHeight);

        context = renderer.getContext();
        context.scale(config.scale, config.scale);
      },

      makeStave: function (staveConfig, keySignature) {

        var staveOptions = new Object();
        staveOptions.right_bar = staveConfig.hasEndLine;

        // Create a stave at the required position on the canvas.
        var stave = new VF.Stave(staveConfig.x, staveConfig.y, staveConfig.width, staveOptions);

        // Add a clef and key signature if it's the first bar in the stave
        if (staveConfig.barNo == 0) {
          wrapper.drawKeySignature (stave, keySignature, true);
        }

        return stave;
      },

      drawStave: function (stave) {
        stave.setContext(context).draw();
      },

      drawTimeSignature: function (stave, timeSignature) {
        var meter = timeSignature.numerator + "/" + timeSignature.denominator;
        stave.setTimeSignature(meter);
      },

      drawVolta: function (stave, volta) {
        // console.log("volta:")
        // console.log(volta);
        var voltaType;
        switch(volta.voltaType) {
          case 2:
            voltaType = VF.Volta.type.BEGIN;
            break;
          case 3:
            voltaType = VF.Volta.type.MID;
            break;
          case 4:
            voltaType = VF.Volta.type.END;
            break;
          case 5:
            voltaType = VF.Volta.type.BEGIN_END;
            break;
          default:
            voltaType = VF.Volta.type.NONE;
        }
        stave.setVoltaType(voltaType, volta.iteration, 30);
      },


      drawKeySignature: function (stave, keySignature, withClef) {
        if (withClef) {
          stave.addClef("treble");
        }
        stave.setKeySignature(keySignature);
      },

      drawAutoBeamedNotes: function (stave, beamGroups, musicSpec) {
        // console.log("drawAutoBeamedNotes")
        // console.log(musicSpec);
        var notes = musicSpec.noteSpecs.map(wrapper.makeStaveNote);
        // notes.unshift (new VF.BarNote({ type: 'single' }));  Doesn't work

        var ties = musicSpec.ties.map(wrapper.makeTie (notes));
        // console.log(ties);
        var groups = beamGroups.map(wrapper.beamGroup);

        var beams = VF.Beam.generateBeams(notes, { groups : groups } );
        Vex.Flow.Formatter.FormatAndDraw(context, stave, notes);
        ties.forEach(function(t) {t.setContext(context).draw()})
        beams.forEach(function(b) {b.setContext(context).draw()});
      },

      drawTupletedNotes: function (stave, beamGroups, musicSpec) {
        // console.log("drawTupletedNotes")
        // console.log(musicSpec);
        var notes = musicSpec.noteSpecs.map(wrapper.makeStaveNote);
        var tuplets = musicSpec.tuplets.map(wrapper.makeTupletLayout (notes));
        var ties = musicSpec.ties.map(wrapper.makeTie (notes));
        var groups = beamGroups.map(wrapper.beamGroup);

        var beams = VF.Beam.generateBeams(notes, { groups : groups } );
        Vex.Flow.Formatter.FormatAndDraw(context, stave, notes);
        beams.forEach(function(b) {b.setContext(context).draw()});
        ties.forEach(function(t) {t.setContext(context).draw()})
        tuplets.forEach(function(tuplet){
          tuplet.setContext(context).draw();
        });
      },


      // make a stave note (n.b. this can represent a single note or a chord)
      makeStaveNote: function (noteSpec) {
        var sn = new VF.StaveNote(noteSpec.vexNote);
        wrapper.addAccidentals (sn, noteSpec.accidentals);
        wrapper.addDots (sn, noteSpec.dots);

        if (noteSpec.graceKeys.length > 0) {
          var graceNotes = noteSpec.graceKeys.map(wrapper.makeGraceNote);
          var graceNoteGroup =  new VF.GraceNoteGroup(graceNotes, true);
          sn.addModifier(0, graceNoteGroup.beamNotes());
        }
        return sn;
      },

      makeGraceNote: function (graceKey) {
        var note = { keys: [graceKey], duration: '8' };
        return new Vex.Flow.GraceNote( note);
      },

      // make a tuplet layout
      makeTupletLayout: function (notes) {
        return function (vexTuplet) {
          return new Vex.Flow.Tuplet(notes.slice(vexTuplet.startPos, vexTuplet.endPos), {
             num_notes: vexTuplet.p, notes_occupied: vexTuplet.q
           });
        };
      },

      // tie a note to its successor
      makeTie: function (notes) {
        return function (noteIndex) {
          return new VF.StaveTie({
            first_note: notes[noteIndex],
            last_note: notes[noteIndex + 1],
            first_indices: [0],
            last_indices: [0]
          });
        };
      },

      // auto-beaming definition of one beam group
      beamGroup: function (group) {
        return new Vex.Flow.Fraction(group.noteCount, group.noteKind);
      },

      // add the accidental(s) to the staveNote(s)
      addAccidentals: function (staveNote, accidentals) {
        accidentals.forEach (function (accidentalString, index) {
          if (accidentalString) {
            staveNote.addAccidental(index, new VF.Accidental(accidentalString));
          }
        });
      },

      // add the accidental(s) to the staveNote(s)
      // not sure yet how to represent double-dots
      addDots: function (staveNote, dots) {
        dots.forEach (function (dotCount, index) {
          if (dotCount == 2) {
            staveNote.addDot(index).addDot(index);
          }
          else if (dotCount == 1) {
            staveNote.addDot(index);
          }
        });
      }


    }

  }();



  exports.initialiseCanvas = wrapper.initialiseCanvas;
  exports.newStaveImpl = wrapper.newStaveImpl;
  exports.displayStave = wrapper.displayStave;  
  exports.displayBarBeginRepeat = wrapper.displayBarBeginRepeat;
  exports.displayBarEndRepeat = wrapper.displayBarEndRepeat;  
  exports.displayAutoBeamedNotesImpl = wrapper.displayAutoBeamedNotesImpl;
  exports.displayTupletedNotesImpl = wrapper.displayTupletedNotesImpl;
  exports.displayVolta = wrapper.displayVolta;
  exports.timeSignatureImpl = wrapper.timeSignatureImpl;
  exports.keySignatureImpl = wrapper.keySignatureImpl;
})(PS["VexFlow.Score"] = PS["VexFlow.Score"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Canonical = PS["Data.Abc.Canonical"];
  var Data_Abc_KeySignature = PS["Data.Abc.KeySignature"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var keySignature = function (ks) {
      var newks = (function () {
          if (ks.mode instanceof Data_Abc.Major) {
              return ks;
          };
          if (ks.mode instanceof Data_Abc.Minor) {
              return ks;
          };
          return Data_Abc_KeySignature.normaliseModalKey(ks);
      })();
      var modeStr = (function () {
          if (newks.mode instanceof Data_Abc.Minor) {
              return "m";
          };
          return "";
      })();
      return Data_Show.show(Data_Abc.showPitchClass)(newks.pitchClass) + (Data_Abc_Canonical.keySignatureAccidental(newks.accidental) + modeStr);
  };
  var headerChange = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              return [ new VexFlow_Abc_ContextChange.KeyChange(h.value0) ];
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return [ new VexFlow_Abc_ContextChange.UnitNoteChange(h.value0) ];
          };
          if (h instanceof Data_Abc.Meter) {
              if (h.value0 instanceof Data_Maybe.Just) {
                  return [ new VexFlow_Abc_ContextChange.MeterChange(h.value0.value0) ];
              };
              return [  ];
          };
          return [  ];
      };
  };
  var duration = function (ctx) {
      return function (d) {
          var v = VexFlow_Abc_Utils.noteTicks(ctx)(d);
          if (v === 128) {
              return new Data_Either.Right("w");
          };
          if (v === 112) {
              return new Data_Either.Right("hdd");
          };
          if (v === 96) {
              return new Data_Either.Right("hd");
          };
          if (v === 64) {
              return new Data_Either.Right("h");
          };
          if (v === 56) {
              return new Data_Either.Right("qdd");
          };
          if (v === 48) {
              return new Data_Either.Right("qd");
          };
          if (v === 32) {
              return new Data_Either.Right("q");
          };
          if (v === 28) {
              return new Data_Either.Right("8dd");
          };
          if (v === 24) {
              return new Data_Either.Right("8d");
          };
          if (v === 16) {
              return new Data_Either.Right("8");
          };
          if (v === 14) {
              return new Data_Either.Right("16dd");
          };
          if (v === 12) {
              return new Data_Either.Right("16d");
          };
          if (v === 8) {
              return new Data_Either.Right("16");
          };
          if (v === 7) {
              return new Data_Either.Right("32dd");
          };
          if (v === 6) {
              return new Data_Either.Right("32d");
          };
          if (v === 4) {
              return new Data_Either.Right("32");
          };
          if (v === 3) {
              return new Data_Either.Right("64d");
          };
          if (v === 2) {
              return new Data_Either.Right("64");
          };
          return new Data_Either.Left("too long or too dotted duration: " + (Data_Show.show(Data_Show.showInt)(Data_Ratio.numerator(d)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Ratio.denominator(d)))));
      };
  };
  var noteDur = function (ctx) {
      return function (abcNote) {
          return duration(ctx)(abcNote.duration);
      };
  };
  var chordalNoteDur = function (ctx) {
      return function (chordDur) {
          return function (abcNote) {
              return duration(ctx)(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(chordDur));
          };
      };
  };
  var buildMusicSpecFromNs = function (tCtx) {
      return function (ens) {
          return Data_Functor.map(Data_Either.functorEither)(function (ns) {
              return {
                  noteSpecs: ns,
                  tuplets: [  ],
                  ties: [  ],
                  tickableContext: tCtx,
                  contextChanges: [  ]
              };
          })(ens);
      };
  };
  var buildMusicSpecFromN = function (tCtx) {
      return function (noteIndex) {
          return function (isTied) {
              return function (ens) {
                  return Data_Functor.map(Data_Either.functorEither)(function (ns) {
                      return {
                          noteSpecs: [ ns ],
                          tuplets: [  ],
                          ties: (function () {
                              if (isTied) {
                                  return [ noteIndex ];
                              };
                              return [  ];
                          })(),
                          tickableContext: tCtx,
                          contextChanges: [  ]
                      };
                  })(ens);
              };
          };
      };
  };
  var buildMusicSpecFromContextChange = function (contextChange) {
      return Data_Either.Right.create({
          noteSpecs: [  ],
          tuplets: [  ],
          ties: [  ],
          tickableContext: Data_Monoid.mempty(VexFlow_Abc_TickableContext.tickableMonoidCtx),
          contextChanges: contextChange
      });
  };
  var accidental = function (v) {
      if (v instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (v instanceof Data_Abc.Flat) {
          return "b";
      };
      if (v instanceof Data_Abc.DoubleSharp) {
          return "##";
      };
      if (v instanceof Data_Abc.DoubleFlat) {
          return "bb";
      };
      if (v instanceof Data_Abc.Natural) {
          return "n";
      };
      if (v instanceof Data_Abc.Implicit) {
          return "";
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Translate line 39, column 1 - line 39, column 35: " + [ v.constructor.name ]);
  };
  var noteAccidental = function (abcNote) {
      return accidental(abcNote.accidental);
  };
  var pitch = function (pc) {
      return function (acc) {
          return function (oct) {
              return Data_String_Common.toLower(Data_Show.show(Data_Abc.showPitchClass)(pc)) + (accidental(acc) + ("/" + Data_Show.show(Data_Show.showInt)(oct)));
          };
      };
  };
  var notePitch = function (abcNote) {
      return pitch(abcNote.pitchClass)(abcNote.accidental)(abcNote.octave - 1 | 0);
  };
  var chord = function (context) {
      return function (abcChord) {
          var keys = Data_Functor.map(Data_Functor.functorArray)(notePitch)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var edur = chordalNoteDur(context)(abcChord.duration)(Data_List_NonEmpty.head(abcChord.notes));
          var dotCounts = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Utils.noteDotCount(context))(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var accidentals = Data_Functor.map(Data_Functor.functorArray)(noteAccidental)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          if (edur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: keys,
                  duration: edur.value0
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: accidentals,
                  dots: dotCounts,
                  graceKeys: [  ]
              });
          };
          if (edur instanceof Data_Either.Left) {
              return new Data_Either.Left(edur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 195, column 5 - line 209, column 23: " + [ edur.constructor.name ]);
      };
  };
  var note = function (context) {
      return function (noteIndex) {
          return function (abcNote) {
              var key = notePitch(abcNote);
              var graceKeys = (function () {
                  var $21 = noteIndex === 0;
                  if ($21) {
                      return context.pendingGraceKeys;
                  };
                  return [  ];
              })();
              var edur = noteDur(context)(abcNote);
              if (edur instanceof Data_Either.Right) {
                  var vexNote = {
                      clef: "treble",
                      keys: [ key ],
                      duration: edur.value0
                  };
                  return new Data_Either.Right({
                      vexNote: vexNote,
                      accidentals: [ accidental(abcNote.accidental) ],
                      dots: [ VexFlow_Abc_Utils.noteDotCount(context)(abcNote) ],
                      graceKeys: graceKeys
                  });
              };
              if (edur instanceof Data_Either.Left) {
                  return new Data_Either.Left(edur.value0);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Translate line 137, column 5 - line 151, column 23: " + [ edur.constructor.name ]);
          };
      };
  };
  var brokenRhythm = function (context) {
      return function (abcNote1) {
          return function (broken) {
              return function (abcNote2) {
                  var v = VexFlow_Abc_Utils.normaliseBroken(broken)(abcNote1)(abcNote2);
                  var enote2 = note(context)(1)(v.value1);
                  var enote1 = note(context)(0)(v.value0);
                  var v1 = new Data_Tuple.Tuple(enote1, enote2);
                  if (v1.value0 instanceof Data_Either.Right && v1.value1 instanceof Data_Either.Right) {
                      return new Data_Either.Right([ v1.value0.value0, v1.value1.value0 ]);
                  };
                  if (v1.value0 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value0.value0);
                  };
                  if (v1.value1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value1.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate line 221, column 5 - line 227, column 16: " + [ v1.constructor.name ]);
              };
          };
      };
  };
  var rest = function (context) {
      return function (abcRest) {
          var key = pitch(Data_Abc.B.value)(Data_Abc.Implicit.value)(4);
          var edur = duration(context)(abcRest.duration);
          if (edur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: [ key ],
                  duration: edur.value0 + "r"
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: [  ],
                  dots: [ VexFlow_Abc_Utils.dotCount(context)(abcRest.duration) ],
                  graceKeys: [  ]
              });
          };
          if (edur instanceof Data_Either.Left) {
              return new Data_Either.Left(edur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate line 162, column 5 - line 176, column 23: " + [ edur.constructor.name ]);
      };
  };
  var restOrNote = function (context) {
      return function (noteIndex) {
          return function (rOrn) {
              if (rOrn instanceof Data_Either.Left) {
                  return rest(context)(rOrn.value0);
              };
              if (rOrn instanceof Data_Either.Right) {
                  return note(context)(noteIndex)(rOrn.value0);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Translate line 255, column 3 - line 259, column 37: " + [ rOrn.constructor.name ]);
          };
      };
  };
  var tuplet = function (context) {
      return function (startOffset) {
          return function (signature) {
              return function (rns) {
                  var vexTuplet = {
                      p: signature.p,
                      q: signature.q,
                      startPos: startOffset,
                      endPos: startOffset + Data_Array.length(rns) | 0
                  };
                  var enoteSpecs = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.mapWithIndex(restOrNote(context))(rns));
                  if (enoteSpecs instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          vexTuplet: vexTuplet,
                          noteSpecs: enoteSpecs.value0
                      });
                  };
                  if (enoteSpecs instanceof Data_Either.Left) {
                      return new Data_Either.Left(enoteSpecs.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate line 243, column 5 - line 250, column 15: " + [ enoteSpecs.constructor.name ]);
              };
          };
      };
  };
  var music = function (context) {
      return function (tickablePosition) {
          return function (noteIndex) {
              return function (m) {
                  var tickableContext = VexFlow_Abc_TickableContext.getTickableContext(m);
                  if (m instanceof Data_Abc.Note) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(m.value0.tied)(note(context)(0)(m.value0));
                  };
                  if (m instanceof Data_Abc.Rest) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(false)(rest(context)(m.value0));
                  };
                  if (m instanceof Data_Abc.Chord) {
                      return buildMusicSpecFromN(tickableContext)(noteIndex)(false)(chord(context)(m.value0));
                  };
                  if (m instanceof Data_Abc.BrokenRhythmPair) {
                      return buildMusicSpecFromNs(tickableContext)(brokenRhythm(context)(m.value0)(m.value1)(m.value2));
                  };
                  if (m instanceof Data_Abc.Tuplet) {
                      var eRes = tuplet(context)(tickablePosition)(m.value0)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1));
                      return Data_Functor.map(Data_Either.functorEither)(function (tupletSpec) {
                          return {
                              noteSpecs: tupletSpec.noteSpecs,
                              tuplets: [ tupletSpec.vexTuplet ],
                              ties: [  ],
                              tickableContext: tickableContext,
                              contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray)
                          };
                      })(eRes);
                  };
                  if (m instanceof Data_Abc.Inline) {
                      return buildMusicSpecFromContextChange(headerChange(context)(m.value0));
                  };
                  return buildMusicSpecFromNs(tickableContext)(new Data_Either.Right([  ]));
              };
          };
      };
  };
  exports["keySignature"] = keySignature;
  exports["headerChange"] = headerChange;
  exports["notePitch"] = notePitch;
  exports["music"] = music;
})(PS["VexFlow.Abc.Translate"] = PS["VexFlow.Abc.Translate"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var staveWidth = function (bs) {
      return Data_Maybe.maybe(0)(function (b) {
          return b.xOffset + b.width | 0;
      })(Data_Array.last(bs));
  };
  var staveEndsWithRepeatBegin = function (bs) {
      var isBeginVolta = function (b) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(b.startLine.repeat)(new Data_Maybe.Just(Data_Abc.Begin.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(b.startLine.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value));
      };
      return Data_Maybe.maybe(false)(isBeginVolta)(Data_Array.last(bs));
  };
  var simpleBarType = {
      thickness: Data_Abc.Thin.value,
      repeat: Data_Maybe.Nothing.value,
      iteration: Data_Maybe.Nothing.value
  };
  var redundantBar = function (barSpec) {
      return VexFlow_Abc_Utils.isEmptyMusicSpec(barSpec.musicSpec) && barSpec.barNumber !== 0;
  };
  var shiftBarEnd = function (acc) {
      return function (barSpec) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
              var newVolta = (function () {
                  if (v) {
                      return VexFlow_Abc_Volta.completeVolta(barSpec.volta);
                  };
                  return barSpec.volta;
              })();
              var newBarSpec = {
                  endLineRepeat: v,
                  volta: newVolta,
                  barNumber: barSpec.barNumber,
                  beamGroups: barSpec.beamGroups,
                  hasEndLine: barSpec.hasEndLine,
                  musicSpec: barSpec.musicSpec,
                  startLine: barSpec.startLine,
                  timeSignature: barSpec.timeSignature,
                  width: barSpec.width,
                  xOffset: barSpec.xOffset
              };
              var currentEndBar = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barSpec.startLine.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barSpec.startLine.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value));
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(currentEndBar))(function (v1) {
                  var $7 = redundantBar(barSpec);
                  if ($7) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(acc);
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Array.cons(newBarSpec)(acc));
              });
          });
      };
  };
  var shiftBarEnds = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(shiftBarEnd)(Data_Monoid.mempty(Data_Monoid.monoidArray));
  var repositionBarEndRepeats = function (bs) {
      return Control_Monad_State.evalState(shiftBarEnds(Data_Array.reverse(bs)))(false);
  };
  var fillStaveLine = function (maxWidth) {
      return function (bs) {
          var v = Data_Array.last(bs);
          if (v instanceof Data_Maybe.Just) {
              var currentWidth = v.value0.xOffset + v.value0.width | 0;
              var $9 = currentWidth <= maxWidth;
              if ($9) {
                  var completionBar = {
                      barNumber: v.value0.barNumber + 1 | 0,
                      width: maxWidth - currentWidth | 0,
                      xOffset: currentWidth,
                      startLine: simpleBarType,
                      hasEndLine: false,
                      endLineRepeat: false,
                      volta: Data_Maybe.Nothing.value,
                      musicSpec: Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid),
                      beamGroups: v.value0.beamGroups,
                      timeSignature: v.value0.timeSignature
                  };
                  return Data_Array.snoc(bs)(completionBar);
              };
              return bs;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return bs;
          };
          throw new Error("Failed pattern match at VexFlow.Abc.BarEnd line 77, column 3 - line 98, column 9: " + [ v.constructor.name ]);
      };
  };
  exports["repositionBarEndRepeats"] = repositionBarEndRepeats;
  exports["fillStaveLine"] = fillStaveLine;
  exports["staveEndsWithRepeatBegin"] = staveEndsWithRepeatBegin;
  exports["staveWidth"] = staveWidth;
})(PS["VexFlow.Abc.BarEnd"] = PS["VexFlow.Abc.BarEnd"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var defaultBeamGroup = function (timeSignature) {
      return function (v) {
          var noteCount = (function () {
              if (timeSignature.numerator === 3) {
                  return 1;
              };
              if (timeSignature.numerator === 4) {
                  var $4 = Data_Array["null"](v.tuplets);
                  if ($4) {
                      return 2;
                  };
                  return 1;
              };
              if (timeSignature.numerator === 6) {
                  return 3;
              };
              if (timeSignature.numerator === 9) {
                  return 3;
              };
              if (timeSignature.numerator === 12) {
                  return 3;
              };
              return 1;
          })();
          return {
              noteCount: noteCount,
              noteKind: timeSignature.denominator
          };
      };
  };
  var defaultBeamGroups = function (timeSignature) {
      return function (musicSpec) {
          return Data_Array.singleton(defaultBeamGroup(timeSignature)(musicSpec));
      };
  };
  exports["defaultBeamGroups"] = defaultBeamGroups;
})(PS["VexFlow.Abc.Beam"] = PS["VexFlow.Abc.Beam"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Metadata = PS["Data.Abc.Metadata"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_BarEnd = PS["VexFlow.Abc.BarEnd"];
  var VexFlow_Abc_Beam = PS["VexFlow.Abc.Beam"];
  var VexFlow_Abc_TickableContext = PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Translate = PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var zipBars = function (bs) {
      var intArray = Data_Array.range(0)(Data_List.length(bs));
      var barArray = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(bs);
      return Data_Array.zip(intArray)(barArray);
  };
  var music = function (tickablePosition) {
      return function (noteIndex) {
          return function (m) {
              if (m instanceof Data_Abc.GraceNote) {
                  var graceKeys = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Translate.notePitch)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value1));
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                          var $24 = {};
                          for (var $25 in v) {
                              if ({}.hasOwnProperty.call(v, $25)) {
                                  $24[$25] = v[$25];
                              };
                          };
                          $24.pendingGraceKeys = graceKeys;
                          return $24;
                      })()))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
                      });
                  });
              };
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
                  var spec = VexFlow_Abc_Translate.music(v)(tickablePosition)(noteIndex)(m);
                  var newContext = VexFlow_Abc_Utils.applyContextChanges(v)(spec);
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))({
                      pendingGraceKeys: [  ],
                      accumulatedStaveWidth: newContext.accumulatedStaveWidth,
                      isMidVolta: newContext.isMidVolta,
                      isNewTimeSignature: newContext.isNewTimeSignature,
                      keySignature: newContext.keySignature,
                      maxWidth: newContext.maxWidth,
                      pendingRepeatBegin: newContext.pendingRepeatBegin,
                      staveNo: newContext.staveNo,
                      timeSignature: newContext.timeSignature,
                      unitNoteLength: newContext.unitNoteLength
                  }))(function (v1) {
                      return Data_Either.either(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(spec);
                  });
              });
          };
      };
  };
  var modifiedStartLine = function (isPendingRepeatbegin) {
      return function (barType) {
          if (isPendingRepeatbegin) {
              return {
                  thickness: barType.thickness,
                  repeat: new Data_Maybe.Just(Data_Abc.Begin.value),
                  iteration: barType.iteration
              };
          };
          return barType;
      };
  };
  var foldMusicsFunction = function (eacc) {
      return function (m) {
          var noteIndex = Data_Array.length(eacc.noteSpecs);
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(music(eacc.tickableContext.value0)(noteIndex)(m))(function (v) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "contextChanges";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "noteSpecs";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tickableContext";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "ties";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tuplets";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(eacc)(v));
          });
      };
  };
  var foldOverMusics = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldMusicsFunction)(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
  var bar = function (staveNumber) {
      return function (barNumber) {
          return function (abcBar) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldOverMusics(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcBar.music)))(function (v) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v1) {
                      var isEmptyBar = VexFlow_Abc_Utils.isEmptyMusicSpec(v);
                      var newIsMidVolta = VexFlow_Abc_Volta.isMidVolta(abcBar.startLine)(isEmptyBar)(v1.isMidVolta);
                      var displayedKeySig = (function () {
                          var $38 = barNumber === 0;
                          if ($38) {
                              return new Data_Maybe.Just(v1.keySignature);
                          };
                          return Data_Maybe.Nothing.value;
                      })();
                      var width = VexFlow_Abc_TickableContext.estimateBarWidth(barNumber === 0)(v1.isNewTimeSignature)(displayedKeySig)(abcBar);
                      var barSpec = {
                          barNumber: barNumber,
                          width: width,
                          xOffset: v1.accumulatedStaveWidth,
                          startLine: modifiedStartLine(v1.pendingRepeatBegin)(abcBar.startLine),
                          hasEndLine: true,
                          endLineRepeat: false,
                          volta: VexFlow_Abc_Volta.startVolta(abcBar.startLine)(isEmptyBar)(v1.isMidVolta),
                          timeSignature: v1.timeSignature,
                          beamGroups: VexFlow_Abc_Beam.defaultBeamGroups(v1.timeSignature)(v),
                          musicSpec: v
                      };
                      var newWidth = v1.accumulatedStaveWidth + barSpec.width | 0;
                      var newAbcContext = (function () {
                          var $39 = {};
                          for (var $40 in v1) {
                              if ({}.hasOwnProperty.call(v1, $40)) {
                                  $39[$40] = v1[$40];
                              };
                          };
                          $39.accumulatedStaveWidth = newWidth;
                          $39.isMidVolta = newIsMidVolta;
                          $39.isNewTimeSignature = false;
                          $39.pendingRepeatBegin = false;
                          return $39;
                      })();
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function (v2) {
                          return Control_Monad_Except_Trans.withExceptT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function (err) {
                              return err + (": bar " + Data_Show.show(Data_Show.showInt)(barNumber));
                          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(barSpec));
                      });
                  });
              });
          };
      };
  };
  var bars = function (staveNumber) {
      return function (bs) {
          var tupleArray = zipBars(bs);
          return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(function (v) {
              return bar(staveNumber)(v.value0)(v.value1);
          })(tupleArray);
      };
  };
  var bodyPart = function (bp) {
      if (bp instanceof Data_Abc.Score) {
          var $46 = Data_Abc_Metadata.isEmptyStave(bp.value0);
          if ($46) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
              var mStaveNo = VexFlow_Abc_Utils.nextStaveNo(v.staveNo);
              var staveNo = Data_Maybe.fromMaybe(0)(mStaveNo);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                  var $48 = {};
                  for (var $49 in v) {
                      if ({}.hasOwnProperty.call(v, $49)) {
                          $48[$49] = v[$49];
                      };
                  };
                  $48.staveNo = mStaveNo;
                  $48.accumulatedStaveWidth = VexFlow_Types.staveIndentation;
                  return $48;
              })()))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bars(staveNo)(bp.value0))(function (v2) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v3) {
                          var pendingRepeatBegin = VexFlow_Abc_BarEnd.staveEndsWithRepeatBegin(v2);
                          var normalisedStaveBars = VexFlow_Abc_BarEnd.repositionBarEndRepeats(v2);
                          var filledStaveLine = VexFlow_Abc_BarEnd.fillStaveLine(v.maxWidth)(normalisedStaveBars);
                          var accumulatedStaveWidth = VexFlow_Abc_BarEnd.staveWidth(normalisedStaveBars);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                              var $53 = {};
                              for (var $54 in v3) {
                                  if ({}.hasOwnProperty.call(v3, $54)) {
                                      $53[$54] = v3[$54];
                                  };
                              };
                              $53.pendingRepeatBegin = pendingRepeatBegin;
                              return $53;
                          })()))(function (v4) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new Data_Maybe.Just({
                                  staveNo: staveNo,
                                  staveWidth: accumulatedStaveWidth,
                                  keySignature: v.keySignature,
                                  isNewTimeSignature: v.isNewTimeSignature,
                                  barSpecs: filledStaveLine
                              }));
                          });
                      });
                  });
              });
          });
      };
      if (bp instanceof Data_Abc.BodyInfo) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
              var contextChanges = VexFlow_Abc_Translate.headerChange(v)(bp.value0);
              var newAbcContext = Data_Foldable.foldl(Data_Foldable.foldableArray)(VexFlow_Abc_Utils.updateAbcContext)(v)(contextChanges);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
              });
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.TranslateStateful line 67, column 3 - line 112, column 21: " + [ bp.constructor.name ]);
  };
  var runBodyPart = function (abcContext) {
      return function (bp) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(Control_Monad_Except_Trans.runExceptT(bodyPart(bp)))(abcContext));
      };
  };
  exports["runBodyPart"] = runBodyPart;
})(PS["VexFlow.Abc.TranslateStateful"] = PS["VexFlow.Abc.TranslateStateful"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["VexFlow.Score"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Alignment = PS["VexFlow.Abc.Alignment"];
  var VexFlow_Abc_ContextChange = PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_Translate = PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_TranslateStateful = PS["VexFlow.Abc.TranslateStateful"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var staveSeparation = 100;
  var staveConfig = function (staveNo) {
      return function (barSpec) {
          return {
              x: barSpec.xOffset,
              y: staveSeparation * staveNo | 0,
              width: barSpec.width,
              barNo: barSpec.barNumber,
              hasEndLine: barSpec.hasEndLine
          };
      };
  };
  var processVolta = function (staveBar) {
      return function (mVolta) {
          if (mVolta instanceof Data_Maybe.Just) {
              return $foreign.displayVolta(staveBar)(mVolta.value0);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarEndRepeat = function (staveBar) {
      return function (isRepeat) {
          if (isRepeat) {
              return $foreign.displayBarEndRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarBeginRepeat = function (staveBar) {
      return function (mRepeat) {
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.Begin) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.End) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.BeginAndEnd) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var newStave = function (staveCnfg) {
      return function (ks) {
          return $foreign.newStaveImpl(staveCnfg)(VexFlow_Abc_Translate.keySignature(ks));
      };
  };
  var addTimeSignature = function (stave) {
      return function (timeSignature) {
          return $foreign.timeSignatureImpl(stave)(timeSignature);
      };
  };
  var addKeySignature = function (stave) {
      return function (ks) {
          return $foreign.keySignatureImpl(stave)(VexFlow_Abc_Translate.keySignature(ks));
      };
  };
  var displayContextChange = function (staveBar) {
      return function (contextChange) {
          if (contextChange instanceof VexFlow_Abc_ContextChange.MeterChange) {
              return addTimeSignature(staveBar)({
                  numerator: contextChange.value0.value0,
                  denominator: contextChange.value0.value1
              });
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return addKeySignature(staveBar)(contextChange.value0.keySignature);
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at VexFlow.Score line 189, column 3 - line 197, column 16: " + [ contextChange.constructor.name ]);
      };
  };
  var displayBarSpec = function (staveSpec) {
      return function (barSpec) {
          return function __do() {
              var v = newStave(staveConfig(staveSpec.staveNo)(barSpec))(staveSpec.keySignature)();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayContextChange(v))(barSpec.musicSpec.contextChanges)();
              (function () {
                  var $22 = barSpec.barNumber === 0 && staveSpec.isNewTimeSignature;
                  if ($22) {
                      return addTimeSignature(v)(barSpec.timeSignature)();
                  };
                  return Data_Unit.unit;
              })();
              var v1 = processBarBeginRepeat(v)(barSpec.startLine.repeat)();
              var v2 = processBarEndRepeat(v)(barSpec.endLineRepeat)();
              var v3 = processVolta(v)(barSpec.volta)();
              (function () {
                  var $23 = Data_Array["null"](barSpec.musicSpec.tuplets);
                  if ($23) {
                      return $foreign.displayAutoBeamedNotesImpl(v)(barSpec.beamGroups)(barSpec.musicSpec)();
                  };
                  return $foreign.displayTupletedNotesImpl(v)(barSpec.beamGroups)(barSpec.musicSpec)();
              })();
              return $foreign.displayStave(v)();
          };
      };
  };
  var renderFullStave = function (abcContext) {
      return function (bodyPart) {
          var emStaveSpec = VexFlow_Abc_TranslateStateful.runBodyPart(abcContext)(bodyPart);
          if (emStaveSpec instanceof Data_Either.Right && emStaveSpec.value0 instanceof Data_Maybe.Just) {
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayBarSpec(emStaveSpec.value0.value0))(emStaveSpec.value0.value0.barSpecs);
          };
          if (emStaveSpec instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (emStaveSpec instanceof Data_Either.Left) {
              return function __do() {
                  var v = Effect_Console.log("error in translating stave  " + emStaveSpec.value0)();
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at VexFlow.Score line 103, column 5 - line 111, column 18: " + [ emStaveSpec.constructor.name ]);
      };
  };
  exports["addTimeSignature"] = addTimeSignature;
  exports["renderFullStave"] = renderFullStave;
  exports["newStave"] = newStave;
  exports["initialiseCanvas"] = $foreign.initialiseCanvas;
})(PS["VexFlow.Score"] = PS["VexFlow.Score"] || {});
(function(exports) {
    "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Examples_Errors_Samples = PS["Examples.Errors.Samples"];
  var Prelude = PS["Prelude"];
  var VexFlow_Abc_Utils = PS["VexFlow.Abc.Utils"];
  var VexFlow_Score = PS["VexFlow.Score"];
  var VexFlow_Types = PS["VexFlow.Types"];                 
  var scale = 0.8;
  var canvasWidth = 1200;
  var config = {
      canvasDivId: "canvas",
      canvasWidth: canvasWidth,
      canvasHeight: 1600,
      scale: scale
  };
  var abcContext = function (v) {
      return function (keySignature) {
          return function (staveNo) {
              return {
                  timeSignature: {
                      numerator: v.value0,
                      denominator: v.value1
                  },
                  keySignature: keySignature,
                  unitNoteLength: Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(16),
                  staveNo: new Data_Maybe.Just(staveNo),
                  accumulatedStaveWidth: VexFlow_Types.staveIndentation,
                  isMidVolta: false,
                  isNewTimeSignature: false,
                  maxWidth: Data_Int.round(Data_Int.toNumber(canvasWidth) / scale),
                  pendingGraceKeys: [  ],
                  pendingRepeatBegin: false
              };
          };
      };
  };

  // | we give each test it's own stave.  The downside is that subsequent staves
  // | do not by default display the time signature (because it's assumed to be inherited)
  // | bad beaming 4/4
  // | the last two notes should be beamed together
  // | this is because we use a beam group of 2/4 (1/2) biased towards standard
  // | reels and hornpipes
  var exampleNothing = (function () {
      var context0 = abcContext(new Data_Tuple.Tuple(4, 4))(VexFlow_Abc_Utils.cMajor)(0);
      var context = {
          staveNo: Data_Maybe.Nothing.value,
          accumulatedStaveWidth: context0.accumulatedStaveWidth,
          isMidVolta: context0.isMidVolta,
          isNewTimeSignature: context0.isNewTimeSignature,
          keySignature: context0.keySignature,
          maxWidth: context0.maxWidth,
          pendingGraceKeys: context0.pendingGraceKeys,
          pendingRepeatBegin: context0.pendingRepeatBegin,
          timeSignature: context0.timeSignature,
          unitNoteLength: context0.unitNoteLength
      };
      var barType = {
          thickness: Data_Abc.Thin.value,
          repeat: Data_Maybe.Nothing.value,
          iteration: Data_Maybe.Nothing.value
      };
      var bar = {
          startLine: barType,
          music: Data_List.fromFoldable(Data_Foldable.foldableArray)([ Examples_Errors_Samples.c(2), Examples_Errors_Samples.f(2), Examples_Errors_Samples.g(2), Examples_Errors_Samples.g(2), Examples_Errors_Samples.f(4), Examples_Errors_Samples.enat(2), Examples_Errors_Samples.enat(2) ])
      };
      var bodyPart = Data_Abc.Score.create(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)([ bar ]));
      return VexFlow_Score.renderFullStave(context)(bodyPart);
  })();
  var main = function __do() {
      var v = VexFlow_Score.initialiseCanvas(config)();
      return exampleNothing();
  };
  exports["canvasWidth"] = canvasWidth;
  exports["scale"] = scale;
  exports["config"] = config;
  exports["abcContext"] = abcContext;
  exports["exampleNothing"] = exampleNothing;
  exports["main"] = main;
})(PS["Examples.Errors.Main"] = PS["Examples.Errors.Main"] || {});
PS["Examples.Errors.Main"].main();